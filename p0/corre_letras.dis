
temp_corre_letras.o:     format de fixer elf32-sisa
temp_corre_letras.o
arquitectura: sisa:3, senyaladors 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
adre√ßa d'inici 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00000f6c paddr 0x00000f6c align 2**0
         filesz 0x000009f4 memsz 0x000009f4 flags r-x
    LOAD off    0x000009f4 vaddr 0x00002000 paddr 0x00002000 align 2**0
         filesz 0x00000094 memsz 0x00000094 flags rw-
    LOAD off    0x00000a80 vaddr 0x000020a0 paddr 0x000020a0 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-

Seccions:
Nom Idx           Mida      VMA       LMA       Des. Fit. Alin.  Senyaladors
  0 .sistema      00000960  00001000  00001000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000094  00002000  00002000  000009f4  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  000020a0  000020a0  00000a88  2**4  ALLOC
  3 .stab         000007bc  000020e0  000020e0  00000a88  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005a2  0000289c  0000289c  00001244  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00001000 l    d  .sistema	00000000 .sistema
000010a2 l       .sistema	00000000 RSI__interrup_timer
00001018 l       .sistema	00000000 RSI_default_resume
000010d8 l       .sistema	00000000 RSI__interrup_keyboard
0000101a l       .sistema	00000000 RSE_default_halt
0000101c l       .sistema	00000000 RSE_default_resume
0000101e l       .sistema	00000000 RSE_excepcion_TLB
00001016 l       .sistema	00000000 __exit
00001060 l       .sistema	00000000 __call_sistema
00001074 l       .sistema	00000000 __interrupcion
00001052 l       .sistema	00000000 __excepcion
00001082 l       .sistema	00000000 __finRSG
000010b8 l       .sistema	00000000 context_switching
00001100 l       .sistema	00000000 __repe
00001000 g       .sistema	00000000 __entry_point
00001274 g     F .sistema	00000334 reset_corre_letras
000011d8 g     F .sistema	0000009c write
000015a8 g     F .sistema	000003b8 main
00001026 g       .sistema	00000000 RSG
000011a0 g     F .sistema	00000038 strlen_s
00001156 g     F .sistema	0000004a mostrar_nueva_posicion
00001114 g     F .sistema	00000042 borrar_letra
000010e2 g     F .sistema	00000032 clear_screen


Disassembly of section .sistema:

00001000 <__entry_point>:
    1000:	5226 	movi	r1, 38
    1002:	5310 	movhi	r1, 16
    1004:	fa70 	wrs	s5, r1
    1006:	5e00 	movi	r7, 0
    1008:	5f30 	movhi	r7, 48
    100a:	5a16 	movi	r5, 22
    100c:	5b10 	movhi	r5, 16
    100e:	5ca8 	movi	r6, -88
    1010:	5d15 	movhi	r6, 21
    1012:	f020 	ei	
    1014:	a183 	jmp	r6

00001016 <__exit>:
    1016:	ffff 	halt	

00001018 <RSI_default_resume>:
    1018:	a183 	jmp	r6

0000101a <RSE_default_halt>:
    101a:	ffff 	halt	

0000101c <RSE_default_resume>:
    101c:	a183 	jmp	r6

0000101e <RSE_excepcion_TLB>:
    101e:	f46c 	rds	r2, s1
    1020:	24be 	addi	r2, r2, -2
    1022:	f2b0 	wrs	s1, r2
    1024:	a183 	jmp	r6

00001026 <RSG>:
    1026:	2ff2 	addi	r7, r7, -14
    1028:	41c6 	st	12(r7), r0
    102a:	43c5 	st	10(r7), r1
    102c:	45c4 	st	8(r7), r2
    102e:	47c3 	st	6(r7), r3
    1030:	49c2 	st	4(r7), r4
    1032:	4bc1 	st	2(r7), r5
    1034:	4dc0 	st	0(r7), r6
    1036:	f22c 	rds	r1, s0
    1038:	f46c 	rds	r2, s1
    103a:	f6ec 	rds	r3, s3
    103c:	2ffa 	addi	r7, r7, -6
    103e:	43c2 	st	4(r7), r1
    1040:	45c1 	st	2(r7), r2
    1042:	47c0 	st	0(r7), r3
    1044:	f2ac 	rds	r1, s2
    1046:	540e 	movi	r2, 14
    1048:	165a 	cmpeq	r3, r1, r2
    104a:	670a 	bnz	r3, 22
    104c:	540f 	movi	r2, 15
    104e:	165a 	cmpeq	r3, r1, r2
    1050:	6711 	bnz	r3, 36

00001052 <__excepcion>:
    1052:	5408 	movi	r2, 8
    1054:	5520 	movhi	r2, 32
    1056:	0261 	add	r1, r1, r1
    1058:	04a1 	add	r2, r2, r1
    105a:	3480 	ld	r2, 0(r2)
    105c:	ac84 	jal	r6, r2
    105e:	6611 	bz	r3, 36

00001060 <__call_sistema>:
    1060:	f2ec 	rds	r1, s3
    1062:	5407 	movi	r2, 7
    1064:	0242 	and	r1, r1, r2
    1066:	0261 	add	r1, r1, r1
    1068:	5424 	movi	r2, 36
    106a:	5520 	movhi	r2, 32
    106c:	04a1 	add	r2, r2, r1
    106e:	3480 	ld	r2, 0(r2)
    1070:	ac84 	jal	r6, r2
    1072:	6707 	bnz	r3, 16

00001074 <__interrupcion>:
    1074:	f228 	getiid	r1
    1076:	0261 	add	r1, r1, r1
    1078:	5400 	movi	r2, 0
    107a:	5520 	movhi	r2, 32
    107c:	04a1 	add	r2, r2, r1
    107e:	3480 	ld	r2, 0(r2)
    1080:	ac84 	jal	r6, r2

00001082 <__finRSG>:
    1082:	37c0 	ld	r3, 0(r7)
    1084:	35c1 	ld	r2, 2(r7)
    1086:	33c2 	ld	r1, 4(r7)
    1088:	2fc6 	addi	r7, r7, 6
    108a:	f6f0 	wrs	s3, r3
    108c:	f2b0 	wrs	s1, r2
    108e:	f070 	wrs	s0, r1
    1090:	3dc0 	ld	r6, 0(r7)
    1092:	3bc1 	ld	r5, 2(r7)
    1094:	39c2 	ld	r4, 4(r7)
    1096:	37c3 	ld	r3, 6(r7)
    1098:	35c4 	ld	r2, 8(r7)
    109a:	33c5 	ld	r1, 10(r7)
    109c:	31c6 	ld	r0, 12(r7)
    109e:	2fce 	addi	r7, r7, 14
    10a0:	f024 	reti	

000010a2 <RSI__interrup_timer>:
    10a2:	58a0 	movi	r4, -96
    10a4:	5920 	movhi	r4, 32
    10a6:	3700 	ld	r3, 0(r4)
    10a8:	5401 	movi	r2, 1
    10aa:	5500 	movhi	r2, 0
    10ac:	12da 	cmpeq	r1, r3, r2
    10ae:	6304 	bnz	r1, 10
    10b0:	26c1 	addi	r3, r3, 1
    10b2:	4700 	st	0(r4), r3
    10b4:	7706 	out	6, r3
    10b6:	a183 	jmp	r6

000010b8 <context_switching>:
    10b8:	58a0 	movi	r4, -96
    10ba:	5920 	movhi	r4, 32
    10bc:	5600 	movi	r3, 0
    10be:	5700 	movhi	r3, 0
    10c0:	4700 	st	0(r4), r3
    10c2:	5607 	movi	r3, 7
    10c4:	5700 	movhi	r3, 0
    10c6:	5000 	movi	r0, 0
    10c8:	5140 	movhi	r0, 64
    10ca:	5601 	movi	r3, 1
    10cc:	5700 	movhi	r3, 0
    10ce:	5832 	movi	r4, 50
    10d0:	59c0 	movhi	r4, -64
    10d2:	a103 	jmp	r4
    10d4:	7706 	out	6, r3
    10d6:	a183 	jmp	r6

000010d8 <RSI__interrup_keyboard>:
    10d8:	760f 	in	r3, 15
    10da:	58a2 	movi	r4, -94
    10dc:	5920 	movhi	r4, 32
    10de:	4700 	st	0(r4), r3
    10e0:	a183 	jmp	r6

000010e2 <clear_screen>:
* Borra la pantalla: Escribe 80x30 caracteres (espacios con   *
* fondo negro) en la memoria de la pantalla (0xA000)          *
**************************************************************/ 
void clear_screen(void)
{
    10e2:	2ff2 	addi	r7, r7, -14
    10e4:	4bc6 	st	12(r7), r5
    10e6:	4dc5 	st	10(r7), r6
    10e8:	2dca 	addi	r6, r7, 10
    10ea:	45c1 	st	2(r7), r2
    10ec:	47c0 	st	0(r7), r3
    int aux1, aux2, aux3;

    __asm__ (  
    10ee:	37bd 	ld	r3, -6(r6)
    10f0:	35be 	ld	r2, -4(r6)
    10f2:	33bf 	ld	r1, -2(r6)
    10f4:	5600 	movi	r3, 0
    10f6:	57a0 	movhi	r3, -96
    10f8:	5460 	movi	r2, 96
    10fa:	5509 	movhi	r2, 9
    10fc:	5220 	movi	r1, 32
    10fe:	5300 	movhi	r1, 0

00001100 <__repe>:
    1100:	42c0 	st	0(r3), r1
    1102:	26c2 	addi	r3, r3, 2
    1104:	24bf 	addi	r2, r2, -1
    1106:	65fc 	bnz	r2, -6
            "movi  %0, lo(0xA000)\n\t"   //0xA000 direccion de inicio de la memoria de video
            "movhi %0, hi(0xA000)\n\t"
            "movi  %1, lo(2400)\n\t"     //(80*30=2400=0x0960) numero caracteres de la pantalla
            "movhi %1, hi(2400)\n\t"
            "movi  %2, lo(0x0020)\n\t"
            "movhi %2, hi(0x0020)\n\t"   //un espacio en color negro
            "__repe: st 0(%0), %2\n\t"
            "addi  %0, %0,2\n\t"
            "addi  %1, %1,-1\n\t"
            "bnz   %1, __repe\n\t"
            : /* sin salidas*/
            : "r" (aux1),
              "r" (aux2),
              "r" (aux3));  
}
    1108:	35c1 	ld	r2, 2(r7)
    110a:	37c0 	ld	r3, 0(r7)
    110c:	3dc5 	ld	r6, 10(r7)
    110e:	3bc6 	ld	r5, 12(r7)
    1110:	2fce 	addi	r7, r7, 14
    1112:	a143 	jmp	r5

00001114 <borrar_letra>:


/**************************************************************
* Borra un caracter en la pantalla: Escribe un espacio con    *
* fondo negro en la fila y columnas indicadas                 *
**************************************************************/ 
void borrar_letra(int fila, int col)
{
    1114:	2ff4 	addi	r7, r7, -12
    1116:	4bc5 	st	10(r7), r5
    1118:	4dc4 	st	8(r7), r6
    111a:	2dc8 	addi	r6, r7, 8
    111c:	41c1 	st	2(r7), r0
    111e:	45c0 	st	0(r7), r2
    int valor;
    int pos;

    valor=0x0020;               //un espacio en color negro
    1120:	5220 	movi	r1, 32
    1122:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;        // cada caracter ocupa 2 bytes de memoria de video
    1124:	3382 	ld	r1, 4(r6)
    1126:	2440 	addi	r2, r1, 0
    1128:	5204 	movi	r1, 4
    112a:	04b1 	sha	r2, r2, r1
    112c:	5202 	movi	r1, 2
    112e:	02b1 	sha	r1, r2, r1
    1130:	04a1 	add	r2, r2, r1
    1132:	3383 	ld	r1, 6(r6)
    1134:	02a1 	add	r1, r2, r1
    1136:	0261 	add	r1, r1, r1
    1138:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;           // la memoria de video empieza en la direccion 0xA000 (40960)
    113a:	33bf 	ld	r1, -2(r6)
    113c:	5400 	movi	r2, 0
    113e:	55a0 	movhi	r2, -96
    1140:	0262 	add	r1, r1, r2
    1142:	43bf 	st	-2(r6), r1

    __asm__ (
    1144:	31bf 	ld	r0, -2(r6)
    1146:	33be 	ld	r1, -4(r6)
    1148:	4200 	st	0(r0), r1
            "st 0(%0), %1"      // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (valor));  
}
    114a:	31c1 	ld	r0, 2(r7)
    114c:	35c0 	ld	r2, 0(r7)
    114e:	3dc4 	ld	r6, 8(r7)
    1150:	3bc5 	ld	r5, 10(r7)
    1152:	2fcc 	addi	r7, r7, 12
    1154:	a143 	jmp	r5

00001156 <mostrar_nueva_posicion>:


/*******************************************************************
* Muestra un caracter en la pantalla: Escribe el caracter recibido *
* con el color y fondo indicados en la fila y columnas indicadas   *
*******************************************************************/ 
void mostrar_nueva_posicion(int fila, int col, char c, char color)
{
    1156:	2ff4 	addi	r7, r7, -12
    1158:	4bc5 	st	10(r7), r5
    115a:	4dc4 	st	8(r7), r6
    115c:	2dc8 	addi	r6, r7, 8
    115e:	41c1 	st	2(r7), r0
    1160:	45c0 	st	0(r7), r2
    int caracter_compuesto;
    int pos;

    caracter_compuesto=color*256+c;
    1162:	d589 	ldb	r2, 9(r6)
    1164:	5208 	movi	r1, 8
    1166:	04b1 	sha	r2, r2, r1
    1168:	d388 	ldb	r1, 8(r6)
    116a:	02a1 	add	r1, r2, r1
    116c:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;           // cada caracter ocupa 2 bytes de memoria de video
    116e:	3382 	ld	r1, 4(r6)
    1170:	2440 	addi	r2, r1, 0
    1172:	5204 	movi	r1, 4
    1174:	04b1 	sha	r2, r2, r1
    1176:	5202 	movi	r1, 2
    1178:	02b1 	sha	r1, r2, r1
    117a:	04a1 	add	r2, r2, r1
    117c:	3383 	ld	r1, 6(r6)
    117e:	02a1 	add	r1, r2, r1
    1180:	0261 	add	r1, r1, r1
    1182:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;              // la memoria de video empieza en la direccion 0xA000 (40960)
    1184:	33bf 	ld	r1, -2(r6)
    1186:	5400 	movi	r2, 0
    1188:	55a0 	movhi	r2, -96
    118a:	0262 	add	r1, r1, r2
    118c:	43bf 	st	-2(r6), r1

    __asm__ (
    118e:	31bf 	ld	r0, -2(r6)
    1190:	33be 	ld	r1, -4(r6)
    1192:	4200 	st	0(r0), r1
            "st 0(%0), %1"         // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                   // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (caracter_compuesto));  
}
    1194:	31c1 	ld	r0, 2(r7)
    1196:	35c0 	ld	r2, 0(r7)
    1198:	3dc4 	ld	r6, 8(r7)
    119a:	3bc5 	ld	r5, 10(r7)
    119c:	2fcc 	addi	r7, r7, 12
    119e:	a143 	jmp	r5

000011a0 <strlen_s>:


/*****************************************************************
* Devuelve la longitud de una cadena de caracteres *
******************************************************************/ 
int strlen_s(char *str)
{
    11a0:	2ff8 	addi	r7, r7, -8
    11a2:	4bc3 	st	6(r7), r5
    11a4:	4dc2 	st	4(r7), r6
    11a6:	2dc4 	addi	r6, r7, 4
    11a8:	45c0 	st	0(r7), r2
  int len;
  for (len = 0; *str++; len++);
    11aa:	5200 	movi	r1, 0
    11ac:	43bf 	st	-2(r6), r1
    11ae:	5a00 	movi	r5, 0
    11b0:	6a03 	bz	r5, 8
    11b2:	33bf 	ld	r1, -2(r6)
    11b4:	2241 	addi	r1, r1, 1
    11b6:	43bf 	st	-2(r6), r1
    11b8:	3382 	ld	r1, 4(r6)
    11ba:	d440 	ldb	r2, 0(r1)
    11bc:	5200 	movi	r1, 0
    11be:	1299 	cmpeq	r1, r2, r1
    11c0:	0258 	not	r1, r1
    11c2:	2242 	addi	r1, r1, 2
    11c4:	3382 	ld	r1, 4(r6)
    11c6:	2241 	addi	r1, r1, 1
    11c8:	4382 	st	4(r6), r1
    11ca:	65f3 	bnz	r2, -24
  return len;
    11cc:	33bf 	ld	r1, -2(r6)
}
    11ce:	35c0 	ld	r2, 0(r7)
    11d0:	3dc2 	ld	r6, 4(r7)
    11d2:	3bc3 	ld	r5, 6(r7)
    11d4:	2fc8 	addi	r7, r7, 8
    11d6:	a143 	jmp	r5

000011d8 <write>:


/*****************************************************************
* Muestra una cadena de caracteres en la pantalla con el color y *
* el fondo indicados empezando la fila y columnas indicadas      *
******************************************************************/ 
int write(int fila, int col, char *buf, int size, char color)
{
    11d8:	2fee 	addi	r7, r7, -18
    11da:	4bc8 	st	16(r7), r5
    11dc:	4dc7 	st	14(r7), r6
    11de:	2dce 	addi	r6, r7, 14
    11e0:	45c1 	st	2(r7), r2
    11e2:	47c0 	st	0(r7), r3
  int i, t;
  int f, c, car;
  t = 0; f = fila; c = col;
    11e4:	5200 	movi	r1, 0
    11e6:	43bc 	st	-8(r6), r1
    11e8:	3382 	ld	r1, 4(r6)
    11ea:	43bd 	st	-6(r6), r1
    11ec:	3383 	ld	r1, 6(r6)
    11ee:	43be 	st	-4(r6), r1
  for (i=0; i<size; i++)   
    11f0:	5200 	movi	r1, 0
    11f2:	43bb 	st	-10(r6), r1
    11f4:	5a5a 	movi	r5, 90
    11f6:	5b12 	movhi	r5, 18
    11f8:	a143 	jmp	r5
    {
      car = buf[i];
    11fa:	35bb 	ld	r2, -10(r6)
    11fc:	3384 	ld	r1, 8(r6)
    11fe:	02a1 	add	r1, r2, r1
    1200:	d240 	ldb	r1, 0(r1)
    1202:	43bf 	st	-2(r6), r1
      mostrar_nueva_posicion(f, c, car, color);
    1204:	33bf 	ld	r1, -2(r6)
    1206:	2640 	addi	r3, r1, 0
    1208:	2ffa 	addi	r7, r7, -6
    120a:	25c0 	addi	r2, r7, 0
    120c:	33bd 	ld	r1, -6(r6)
    120e:	4280 	st	0(r2), r1
    1210:	33be 	ld	r1, -4(r6)
    1212:	4281 	st	2(r2), r1
    1214:	e684 	stb	4(r2), r3
    1216:	d38c 	ldb	r1, 12(r6)
    1218:	e285 	stb	5(r2), r1
    121a:	5256 	movi	r1, 86
    121c:	5311 	movhi	r1, 17
    121e:	aa44 	jal	r5, r1
    1220:	2fc6 	addi	r7, r7, 6
      t++;
    1222:	33bc 	ld	r1, -8(r6)
    1224:	2241 	addi	r1, r1, 1
    1226:	43bc 	st	-8(r6), r1
      if (car=='\n') f++;
    1228:	35bf 	ld	r2, -2(r6)
    122a:	520a 	movi	r1, 10
    122c:	1299 	cmpeq	r1, r2, r1
    122e:	6205 	bz	r1, 12
    1230:	33bd 	ld	r1, -6(r6)
    1232:	2241 	addi	r1, r1, 1
    1234:	43bd 	st	-6(r6), r1
    1236:	5a00 	movi	r5, 0
    1238:	6a0d 	bz	r5, 28
      else if (car=='\r') c=1;
    123a:	33bf 	ld	r1, -2(r6)
    123c:	540d 	movi	r2, 13
    123e:	125a 	cmpeq	r1, r1, r2
    1240:	6204 	bz	r1, 10
    1242:	5201 	movi	r1, 1
    1244:	43be 	st	-4(r6), r1
    1246:	5a00 	movi	r5, 0
    1248:	6a05 	bz	r5, 12
      else if (car!=0) c++;   
    124a:	33bf 	ld	r1, -2(r6)
    124c:	6203 	bz	r1, 8
    124e:	33be 	ld	r1, -4(r6)
    1250:	2241 	addi	r1, r1, 1
    1252:	43be 	st	-4(r6), r1
    1254:	33bb 	ld	r1, -10(r6)
    1256:	2241 	addi	r1, r1, 1
    1258:	43bb 	st	-10(r6), r1
    125a:	33bb 	ld	r1, -10(r6)
    125c:	3585 	ld	r2, 10(r6)
    125e:	1242 	cmplt	r1, r1, r2
    1260:	5afa 	movi	r5, -6
    1262:	5b11 	movhi	r5, 17
    1264:	a341 	jnz	r1, r5
    }

  return t;
    1266:	33bc 	ld	r1, -8(r6)
}
    1268:	35c1 	ld	r2, 2(r7)
    126a:	37c0 	ld	r3, 0(r7)
    126c:	3dc7 	ld	r6, 14(r7)
    126e:	3bc8 	ld	r5, 16(r7)
    1270:	2fd2 	addi	r7, r7, 18
    1272:	a143 	jmp	r5

00001274 <reset_corre_letras>:




#define ANCHO_PANTALLA  80
#define LIMITE_LETRAS   13

/* colores */
#define NEGRO           0x00
#define BLANCO          0x3F
#define ROJO            0x03
#define VERDE           0x0C
#define AZUL            0x30
#define GRIS_OSCURO     0x15
#define AZUL_CIELO      0x3C
#define AMARILLO        0x0F
#define LILA            0x2A
#define GRIS_CLARO      0x2A
#define GRIS_MUY_CLARO  0x3F

char letras[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M'};
char colores[] = {BLANCO, ROJO, VERDE, AZUL, GRIS_OSCURO, AZUL_CIELO, AMARILLO, LILA, GRIS_CLARO, GRIS_MUY_CLARO, 0x1A, 0X21, 0X2B};
int divisores[] = {1,2,3,4,5,6,7,8,9,10,11,12,13};
char mensaje[] = "pulsa 'R' para reiniciar o 'P' para pausa.";

unsigned int tics_timer=0;     //variable global cuyo valor es modificado por la interrupcion de reloj
unsigned int tecla_pulsada=0;  //variable global cuyo valor es modificado por la interrupcion de teclado

struct letra_t
{
    int posicion;    // posicion dentro la linea
    char caracter;   // caracter a mostrar
    char color;      // color caracter

};

#define NUMERO_LETRAS  12
struct letra_t  letra[NUMERO_LETRAS];


void reset_corre_letras(void)
{
    1274:	2fe0 	addi	r7, r7, -32
    1276:	4bcf 	st	30(r7), r5
    1278:	4dce 	st	28(r7), r6
    127a:	2ddc 	addi	r6, r7, 28
    127c:	5acc 	movi	r5, -52
    127e:	0fe5 	add	r7, r7, r5
    1280:	41c3 	st	6(r7), r0
    1282:	45c2 	st	4(r7), r2
    1284:	47c1 	st	2(r7), r3
    1286:	49c0 	st	0(r7), r4
    clear_screen();      // borrar pantalla
    1288:	52e2 	movi	r1, -30
    128a:	5310 	movhi	r1, 16
    128c:	aa44 	jal	r5, r1

    write(15, 19, mensaje, strlen_s(mensaje), ROJO);
    128e:	2ffe 	addi	r7, r7, -2
    1290:	25c0 	addi	r2, r7, 0
    1292:	5268 	movi	r1, 104
    1294:	5320 	movhi	r1, 32
    1296:	4280 	st	0(r2), r1
    1298:	52a0 	movi	r1, -96
    129a:	5311 	movhi	r1, 17
    129c:	aa44 	jal	r5, r1
    129e:	2fc2 	addi	r7, r7, 2
    12a0:	2640 	addi	r3, r1, 0
    12a2:	2ff6 	addi	r7, r7, -10
    12a4:	25c0 	addi	r2, r7, 0
    12a6:	520f 	movi	r1, 15
    12a8:	4280 	st	0(r2), r1
    12aa:	5213 	movi	r1, 19
    12ac:	4281 	st	2(r2), r1
    12ae:	5268 	movi	r1, 104
    12b0:	5320 	movhi	r1, 32
    12b2:	4282 	st	4(r2), r1
    12b4:	4683 	st	6(r2), r3
    12b6:	5203 	movi	r1, 3
    12b8:	e288 	stb	8(r2), r1
    12ba:	52d8 	movi	r1, -40
    12bc:	5311 	movhi	r1, 17
    12be:	aa44 	jal	r5, r1
    12c0:	2fca 	addi	r7, r7, 10
    int i;    
    for (i=0; i<NUMERO_LETRAS; i++) {
    12c2:	5200 	movi	r1, 0
    12c4:	43bf 	st	-2(r6), r1
    12c6:	5a8a 	movi	r5, -118
    12c8:	5b15 	movhi	r5, 21
    12ca:	a143 	jmp	r5
        letra[i].posicion=0;
    12cc:	35bf 	ld	r2, -2(r6)
    12ce:	50b0 	movi	r0, -80
    12d0:	5120 	movhi	r0, 32
    12d2:	41b8 	st	-16(r6), r0
    12d4:	520f 	movi	r1, 15
    12d6:	0258 	not	r1, r1
    12d8:	2241 	addi	r1, r1, 1
    12da:	02b1 	sha	r1, r2, r1
    12dc:	2680 	addi	r3, r2, 0
    12de:	2840 	addi	r4, r1, 0
    12e0:	520e 	movi	r1, 14
    12e2:	0258 	not	r1, r1
    12e4:	2241 	addi	r1, r1, 1
    12e6:	02f9 	shl	r1, r3, r1
    12e8:	43b7 	st	-18(r6), r1
    12ea:	5002 	movi	r0, 2
    12ec:	5202 	movi	r1, 2
    12ee:	43b6 	st	-20(r6), r1
    12f0:	0530 	sha	r2, r4, r0
    12f2:	31b7 	ld	r0, -18(r6)
    12f4:	040a 	or	r2, r0, r2
    12f6:	31b6 	ld	r0, -20(r6)
    12f8:	02f0 	sha	r1, r3, r0
    12fa:	37b8 	ld	r3, -16(r6)
    12fc:	04e1 	add	r2, r3, r1
    12fe:	5200 	movi	r1, 0
    1300:	4280 	st	0(r2), r1
        letra[i].caracter=letras[i];
    1302:	39bf 	ld	r4, -2(r6)
    1304:	49b9 	st	-14(r6), r4
    1306:	39bf 	ld	r4, -2(r6)
    1308:	5034 	movi	r0, 52
    130a:	5120 	movhi	r0, 32
    130c:	520f 	movi	r1, 15
    130e:	0258 	not	r1, r1
    1310:	2241 	addi	r1, r1, 1
    1312:	0731 	sha	r3, r4, r1
    1314:	2300 	addi	r1, r4, 0
    1316:	24c0 	addi	r2, r3, 0
    1318:	0221 	add	r1, r0, r1
    131a:	d240 	ldb	r1, 0(r1)
    131c:	43ba 	st	-12(r6), r1
    131e:	50b0 	movi	r0, -80
    1320:	5120 	movhi	r0, 32
    1322:	41b5 	st	-22(r6), r0
    1324:	520f 	movi	r1, 15
    1326:	0258 	not	r1, r1
    1328:	2241 	addi	r1, r1, 1
    132a:	35b9 	ld	r2, -14(r6)
    132c:	06b1 	sha	r3, r2, r1
    132e:	39b9 	ld	r4, -14(r6)
    1330:	2300 	addi	r1, r4, 0
    1332:	24c0 	addi	r2, r3, 0
    1334:	560e 	movi	r3, 14
    1336:	06d8 	not	r3, r3
    1338:	26c1 	addi	r3, r3, 1
    133a:	067b 	shl	r3, r1, r3
    133c:	47b4 	st	-24(r6), r3
    133e:	5002 	movi	r0, 2
    1340:	5602 	movi	r3, 2
    1342:	47b3 	st	-26(r6), r3
    1344:	08b0 	sha	r4, r2, r0
    1346:	31b4 	ld	r0, -24(r6)
    1348:	080c 	or	r4, r0, r4
    134a:	31b3 	ld	r0, -26(r6)
    134c:	0670 	sha	r3, r1, r0
    134e:	5202 	movi	r1, 2
    1350:	43b1 	st	-30(r6), r1
    1352:	5400 	movi	r2, 0
    1354:	45b2 	st	-28(r6), r2
    1356:	31b1 	ld	r0, -30(r6)
    1358:	02e0 	add	r1, r3, r0
    135a:	50b8 	movi	r0, -72
    135c:	0026 	add	r0, r0, r6
    135e:	4200 	st	0(r0), r1
    1360:	52b8 	movi	r1, -72
    1362:	0266 	add	r1, r1, r6
    1364:	3240 	ld	r1, 0(r1)
    1366:	1463 	cmpltu	r2, r1, r3
    1368:	52bc 	movi	r1, -68
    136a:	0266 	add	r1, r1, r6
    136c:	4440 	st	0(r1), r2
    136e:	35b2 	ld	r2, -28(r6)
    1370:	0122 	add	r0, r4, r2
    1372:	54ba 	movi	r2, -70
    1374:	04a6 	add	r2, r2, r6
    1376:	4080 	st	0(r2), r0
    1378:	58bc 	movi	r4, -68
    137a:	0926 	add	r4, r4, r6
    137c:	3100 	ld	r0, 0(r4)
    137e:	58ba 	movi	r4, -70
    1380:	0926 	add	r4, r4, r6
    1382:	3900 	ld	r4, 0(r4)
    1384:	0624 	add	r3, r0, r4
    1386:	22c0 	addi	r1, r3, 0
    1388:	50ba 	movi	r0, -70
    138a:	0026 	add	r0, r0, r6
    138c:	4200 	st	0(r0), r1
    138e:	37b5 	ld	r3, -22(r6)
    1390:	54b8 	movi	r2, -72
    1392:	04a6 	add	r2, r2, r6
    1394:	3480 	ld	r2, 0(r2)
    1396:	02e2 	add	r1, r3, r2
    1398:	37ba 	ld	r3, -12(r6)
    139a:	e640 	stb	0(r1), r3
        letra[i].color=colores[i];
    139c:	39bf 	ld	r4, -2(r6)
    139e:	49bb 	st	-10(r6), r4
    13a0:	39bf 	ld	r4, -2(r6)
    13a2:	5041 	movi	r0, 65
    13a4:	5120 	movhi	r0, 32
    13a6:	520f 	movi	r1, 15
    13a8:	0258 	not	r1, r1
    13aa:	2241 	addi	r1, r1, 1
    13ac:	0731 	sha	r3, r4, r1
    13ae:	2300 	addi	r1, r4, 0
    13b0:	24c0 	addi	r2, r3, 0
    13b2:	0221 	add	r1, r0, r1
    13b4:	d240 	ldb	r1, 0(r1)
    13b6:	43bc 	st	-8(r6), r1
    13b8:	50b0 	movi	r0, -80
    13ba:	5120 	movhi	r0, 32
    13bc:	41b0 	st	-32(r6), r0
    13be:	520f 	movi	r1, 15
    13c0:	0258 	not	r1, r1
    13c2:	2241 	addi	r1, r1, 1
    13c4:	35bb 	ld	r2, -10(r6)
    13c6:	06b1 	sha	r3, r2, r1
    13c8:	39bb 	ld	r4, -10(r6)
    13ca:	2300 	addi	r1, r4, 0
    13cc:	24c0 	addi	r2, r3, 0
    13ce:	560e 	movi	r3, 14
    13d0:	06d8 	not	r3, r3
    13d2:	26c1 	addi	r3, r3, 1
    13d4:	067b 	shl	r3, r1, r3
    13d6:	47af 	st	-34(r6), r3
    13d8:	5002 	movi	r0, 2
    13da:	5602 	movi	r3, 2
    13dc:	47ae 	st	-36(r6), r3
    13de:	08b0 	sha	r4, r2, r0
    13e0:	31af 	ld	r0, -34(r6)
    13e2:	080c 	or	r4, r0, r4
    13e4:	31ae 	ld	r0, -36(r6)
    13e6:	0670 	sha	r3, r1, r0
    13e8:	5202 	movi	r1, 2
    13ea:	43ac 	st	-40(r6), r1
    13ec:	5400 	movi	r2, 0
    13ee:	45ad 	st	-38(r6), r2
    13f0:	31ac 	ld	r0, -40(r6)
    13f2:	02e0 	add	r1, r3, r0
    13f4:	50b8 	movi	r0, -72
    13f6:	0026 	add	r0, r0, r6
    13f8:	4200 	st	0(r0), r1
    13fa:	52b8 	movi	r1, -72
    13fc:	0266 	add	r1, r1, r6
    13fe:	3240 	ld	r1, 0(r1)
    1400:	1463 	cmpltu	r2, r1, r3
    1402:	52bc 	movi	r1, -68
    1404:	0266 	add	r1, r1, r6
    1406:	4440 	st	0(r1), r2
    1408:	35ad 	ld	r2, -38(r6)
    140a:	0122 	add	r0, r4, r2
    140c:	54ba 	movi	r2, -70
    140e:	04a6 	add	r2, r2, r6
    1410:	4080 	st	0(r2), r0
    1412:	58bc 	movi	r4, -68
    1414:	0926 	add	r4, r4, r6
    1416:	3100 	ld	r0, 0(r4)
    1418:	58ba 	movi	r4, -70
    141a:	0926 	add	r4, r4, r6
    141c:	3900 	ld	r4, 0(r4)
    141e:	0624 	add	r3, r0, r4
    1420:	22c0 	addi	r1, r3, 0
    1422:	50ba 	movi	r0, -70
    1424:	0026 	add	r0, r0, r6
    1426:	4200 	st	0(r0), r1
    1428:	37b0 	ld	r3, -32(r6)
    142a:	54b8 	movi	r2, -72
    142c:	04a6 	add	r2, r2, r6
    142e:	3480 	ld	r2, 0(r2)
    1430:	02e2 	add	r1, r3, r2
    1432:	37bc 	ld	r3, -8(r6)
    1434:	e641 	stb	1(r1), r3
        mostrar_nueva_posicion(i,letra[i].posicion,letra[i].caracter,letra[i].color);
    1436:	35bf 	ld	r2, -2(r6)
    1438:	58b0 	movi	r4, -80
    143a:	5920 	movhi	r4, 32
    143c:	49ab 	st	-42(r6), r4
    143e:	520f 	movi	r1, 15
    1440:	0258 	not	r1, r1
    1442:	2241 	addi	r1, r1, 1
    1444:	02b1 	sha	r1, r2, r1
    1446:	2680 	addi	r3, r2, 0
    1448:	2840 	addi	r4, r1, 0
    144a:	520e 	movi	r1, 14
    144c:	0258 	not	r1, r1
    144e:	2241 	addi	r1, r1, 1
    1450:	02f9 	shl	r1, r3, r1
    1452:	43aa 	st	-44(r6), r1
    1454:	5002 	movi	r0, 2
    1456:	5202 	movi	r1, 2
    1458:	43a9 	st	-46(r6), r1
    145a:	0530 	sha	r2, r4, r0
    145c:	31aa 	ld	r0, -44(r6)
    145e:	040a 	or	r2, r0, r2
    1460:	31a9 	ld	r0, -46(r6)
    1462:	02f0 	sha	r1, r3, r0
    1464:	37ab 	ld	r3, -42(r6)
    1466:	02e1 	add	r1, r3, r1
    1468:	3240 	ld	r1, 0(r1)
    146a:	43bd 	st	-6(r6), r1
    146c:	39bf 	ld	r4, -2(r6)
    146e:	50b0 	movi	r0, -80
    1470:	5120 	movhi	r0, 32
    1472:	41a8 	st	-48(r6), r0
    1474:	520f 	movi	r1, 15
    1476:	0258 	not	r1, r1
    1478:	2241 	addi	r1, r1, 1
    147a:	0731 	sha	r3, r4, r1
    147c:	2300 	addi	r1, r4, 0
    147e:	24c0 	addi	r2, r3, 0
    1480:	560e 	movi	r3, 14
    1482:	06d8 	not	r3, r3
    1484:	26c1 	addi	r3, r3, 1
    1486:	067b 	shl	r3, r1, r3
    1488:	47a7 	st	-50(r6), r3
    148a:	5002 	movi	r0, 2
    148c:	5602 	movi	r3, 2
    148e:	47a6 	st	-52(r6), r3
    1490:	08b0 	sha	r4, r2, r0
    1492:	31a7 	ld	r0, -50(r6)
    1494:	080c 	or	r4, r0, r4
    1496:	31a6 	ld	r0, -52(r6)
    1498:	0670 	sha	r3, r1, r0
    149a:	5202 	movi	r1, 2
    149c:	43a4 	st	-56(r6), r1
    149e:	5400 	movi	r2, 0
    14a0:	45a5 	st	-54(r6), r2
    14a2:	31a4 	ld	r0, -56(r6)
    14a4:	02e0 	add	r1, r3, r0
    14a6:	50b8 	movi	r0, -72
    14a8:	0026 	add	r0, r0, r6
    14aa:	4200 	st	0(r0), r1
    14ac:	52b8 	movi	r1, -72
    14ae:	0266 	add	r1, r1, r6
    14b0:	3240 	ld	r1, 0(r1)
    14b2:	1463 	cmpltu	r2, r1, r3
    14b4:	52bc 	movi	r1, -68
    14b6:	0266 	add	r1, r1, r6
    14b8:	4440 	st	0(r1), r2
    14ba:	35a5 	ld	r2, -54(r6)
    14bc:	0122 	add	r0, r4, r2
    14be:	54ba 	movi	r2, -70
    14c0:	04a6 	add	r2, r2, r6
    14c2:	4080 	st	0(r2), r0
    14c4:	58bc 	movi	r4, -68
    14c6:	0926 	add	r4, r4, r6
    14c8:	3100 	ld	r0, 0(r4)
    14ca:	58ba 	movi	r4, -70
    14cc:	0926 	add	r4, r4, r6
    14ce:	3900 	ld	r4, 0(r4)
    14d0:	0624 	add	r3, r0, r4
    14d2:	22c0 	addi	r1, r3, 0
    14d4:	50ba 	movi	r0, -70
    14d6:	0026 	add	r0, r0, r6
    14d8:	4200 	st	0(r0), r1
    14da:	37a8 	ld	r3, -48(r6)
    14dc:	54b8 	movi	r2, -72
    14de:	04a6 	add	r2, r2, r6
    14e0:	3480 	ld	r2, 0(r2)
    14e2:	02e2 	add	r1, r3, r2
    14e4:	d240 	ldb	r1, 0(r1)
    14e6:	43be 	st	-4(r6), r1
    14e8:	39bf 	ld	r4, -2(r6)
    14ea:	56b0 	movi	r3, -80
    14ec:	5720 	movhi	r3, 32
    14ee:	47a3 	st	-58(r6), r3
    14f0:	520f 	movi	r1, 15
    14f2:	0258 	not	r1, r1
    14f4:	2241 	addi	r1, r1, 1
    14f6:	0731 	sha	r3, r4, r1
    14f8:	2300 	addi	r1, r4, 0
    14fa:	24c0 	addi	r2, r3, 0
    14fc:	560e 	movi	r3, 14
    14fe:	06d8 	not	r3, r3
    1500:	26c1 	addi	r3, r3, 1
    1502:	067b 	shl	r3, r1, r3
    1504:	47a2 	st	-60(r6), r3
    1506:	5002 	movi	r0, 2
    1508:	5802 	movi	r4, 2
    150a:	49a1 	st	-62(r6), r4
    150c:	08b0 	sha	r4, r2, r0
    150e:	31a2 	ld	r0, -60(r6)
    1510:	080c 	or	r4, r0, r4
    1512:	31a1 	ld	r0, -62(r6)
    1514:	0670 	sha	r3, r1, r0
    1516:	5402 	movi	r2, 2
    1518:	52be 	movi	r1, -66
    151a:	0266 	add	r1, r1, r6
    151c:	4440 	st	0(r1), r2
    151e:	5000 	movi	r0, 0
    1520:	41a0 	st	-64(r6), r0
    1522:	52be 	movi	r1, -66
    1524:	0266 	add	r1, r1, r6
    1526:	3240 	ld	r1, 0(r1)
    1528:	04e1 	add	r2, r3, r1
    152a:	52b8 	movi	r1, -72
    152c:	0266 	add	r1, r1, r6
    152e:	4440 	st	0(r1), r2
    1530:	54b8 	movi	r2, -72
    1532:	04a6 	add	r2, r2, r6
    1534:	3480 	ld	r2, 0(r2)
    1536:	10a3 	cmpltu	r0, r2, r3
    1538:	54bc 	movi	r2, -68
    153a:	04a6 	add	r2, r2, r6
    153c:	4080 	st	0(r2), r0
    153e:	31a0 	ld	r0, -64(r6)
    1540:	0320 	add	r1, r4, r0
    1542:	50ba 	movi	r0, -70
    1544:	0026 	add	r0, r0, r6
    1546:	4200 	st	0(r0), r1
    1548:	52bc 	movi	r1, -68
    154a:	0266 	add	r1, r1, r6
    154c:	3440 	ld	r2, 0(r1)
    154e:	52ba 	movi	r1, -70
    1550:	0266 	add	r1, r1, r6
    1552:	3240 	ld	r1, 0(r1)
    1554:	06a1 	add	r3, r2, r1
    1556:	28c0 	addi	r4, r3, 0
    1558:	54ba 	movi	r2, -70
    155a:	04a6 	add	r2, r2, r6
    155c:	4880 	st	0(r2), r4
    155e:	35a3 	ld	r2, -58(r6)
    1560:	50b8 	movi	r0, -72
    1562:	0026 	add	r0, r0, r6
    1564:	3000 	ld	r0, 0(r0)
    1566:	02a0 	add	r1, r2, r0
    1568:	d641 	ldb	r3, 1(r1)
    156a:	2ffa 	addi	r7, r7, -6
    156c:	23c0 	addi	r1, r7, 0
    156e:	35bf 	ld	r2, -2(r6)
    1570:	4440 	st	0(r1), r2
    1572:	35bd 	ld	r2, -6(r6)
    1574:	4441 	st	2(r1), r2
    1576:	39be 	ld	r4, -4(r6)
    1578:	e844 	stb	4(r1), r4
    157a:	e645 	stb	5(r1), r3
    157c:	5256 	movi	r1, 86
    157e:	5311 	movhi	r1, 17
    1580:	aa44 	jal	r5, r1
    1582:	2fc6 	addi	r7, r7, 6
    1584:	33bf 	ld	r1, -2(r6)
    1586:	2241 	addi	r1, r1, 1
    1588:	43bf 	st	-2(r6), r1
    158a:	33bf 	ld	r1, -2(r6)
    158c:	540b 	movi	r2, 11
    158e:	124a 	cmple	r1, r1, r2
    1590:	5acc 	movi	r5, -52
    1592:	5b12 	movhi	r5, 18
    1594:	a341 	jnz	r1, r5
    }
}
    1596:	31c3 	ld	r0, 6(r7)
    1598:	35c2 	ld	r2, 4(r7)
    159a:	37c1 	ld	r3, 2(r7)
    159c:	39c0 	ld	r4, 0(r7)
    159e:	2f80 	addi	r7, r6, 0
    15a0:	3dc0 	ld	r6, 0(r7)
    15a2:	3bc1 	ld	r5, 2(r7)
    15a4:	2fc4 	addi	r7, r7, 4
    15a6:	a143 	jmp	r5

000015a8 <main>:


int main (void) {
    15a8:	2fe0 	addi	r7, r7, -32
    15aa:	4bcf 	st	30(r7), r5
    15ac:	4dce 	st	28(r7), r6
    15ae:	2ddc 	addi	r6, r7, 28
    15b0:	5ac2 	movi	r5, -62
    15b2:	0fe5 	add	r7, r7, r5
    15b4:	41c3 	st	6(r7), r0
    15b6:	45c2 	st	4(r7), r2
    15b8:	47c1 	st	2(r7), r3
    15ba:	49c0 	st	0(r7), r4

    unsigned int tics_anterior=0;
    15bc:	5200 	movi	r1, 0
    15be:	43bd 	st	-6(r6), r1
    int pause=0;
    15c0:	5200 	movi	r1, 0
    15c2:	43be 	st	-4(r6), r1
    
    if (NUMERO_LETRAS<=LIMITE_LETRAS) {
        
        reset_corre_letras();
    15c4:	5274 	movi	r1, 116
    15c6:	5312 	movhi	r1, 18
    15c8:	aa44 	jal	r5, r1

        while (1) {
            switch (tecla_pulsada)
    15ca:	52a2 	movi	r1, -94
    15cc:	5320 	movhi	r1, 32
    15ce:	3240 	ld	r1, 0(r1)
    15d0:	43b7 	st	-18(r6), r1
    15d2:	5252 	movi	r1, 82
    15d4:	31b7 	ld	r0, -18(r6)
    15d6:	1219 	cmpeq	r1, r0, r1
    15d8:	6315 	bnz	r1, 44
    15da:	5252 	movi	r1, 82
    15dc:	35b7 	ld	r2, -18(r6)
    15de:	12a9 	cmpleu	r1, r2, r1
    15e0:	6207 	bz	r1, 16
    15e2:	5250 	movi	r1, 80
    15e4:	37b7 	ld	r3, -18(r6)
    15e6:	12d9 	cmpeq	r1, r3, r1
    15e8:	6316 	bnz	r1, 46
    15ea:	5a2e 	movi	r5, 46
    15ec:	5b16 	movhi	r5, 22
    15ee:	a143 	jmp	r5
    15f0:	5270 	movi	r1, 112
    15f2:	39b7 	ld	r4, -18(r6)
    15f4:	1319 	cmpeq	r1, r4, r1
    15f6:	630f 	bnz	r1, 32
    15f8:	5272 	movi	r1, 114
    15fa:	31b7 	ld	r0, -18(r6)
    15fc:	1219 	cmpeq	r1, r0, r1
    15fe:	6302 	bnz	r1, 6
    1600:	5a00 	movi	r5, 0
    1602:	6a15 	bz	r5, 44
            {
            case 'r':    case 'R':
                reset_corre_letras();
    1604:	5274 	movi	r1, 116
    1606:	5312 	movhi	r1, 18
    1608:	aa44 	jal	r5, r1
                tecla_pulsada=0;
    160a:	54a2 	movi	r2, -94
    160c:	5520 	movhi	r2, 32
    160e:	5200 	movi	r1, 0
    1610:	4280 	st	0(r2), r1
                break;
    1612:	5a00 	movi	r5, 0
    1614:	6a0c 	bz	r5, 26

            case 'p':    case 'P':
                if (pause==0) pause=1; else pause=0;
    1616:	33be 	ld	r1, -4(r6)
    1618:	6304 	bnz	r1, 10
    161a:	5201 	movi	r1, 1
    161c:	43be 	st	-4(r6), r1
    161e:	5a00 	movi	r5, 0
    1620:	6a02 	bz	r5, 6
    1622:	5200 	movi	r1, 0
    1624:	43be 	st	-4(r6), r1
                tecla_pulsada=0;
    1626:	54a2 	movi	r2, -94
    1628:	5520 	movhi	r2, 32
    162a:	5200 	movi	r1, 0
    162c:	4280 	st	0(r2), r1
                break;

            default:
                break;
            }

            if (pause==0) {
    162e:	33be 	ld	r1, -4(r6)
    1630:	5aca 	movi	r5, -54
    1632:	5b15 	movhi	r5, 21
    1634:	a341 	jnz	r1, r5
                // para DEBUG: mostramos los valores del timer por los leds verdes
                __asm__ ( "out %0, %1" 
    1636:	52a0 	movi	r1, -96
    1638:	5320 	movhi	r1, 32
    163a:	3240 	ld	r1, 0(r1)
    163c:	7305 	out	5, r1
                        : /* sin salidas*/
                        : "i" (5), "r" (tics_timer));
                // fin DEBUG

                if (tics_timer!=tics_anterior) {
    163e:	52a0 	movi	r1, -96
    1640:	5320 	movhi	r1, 32
    1642:	3440 	ld	r2, 0(r1)
    1644:	33bd 	ld	r1, -6(r6)
    1646:	1299 	cmpeq	r1, r2, r1
    1648:	5aca 	movi	r5, -54
    164a:	5b15 	movhi	r5, 21
    164c:	a341 	jnz	r1, r5
                    tics_anterior=tics_timer;
    164e:	52a0 	movi	r1, -96
    1650:	5320 	movhi	r1, 32
    1652:	3240 	ld	r1, 0(r1)
    1654:	43bd 	st	-6(r6), r1

                    int fila;
                    for (fila=0; fila<NUMERO_LETRAS; fila++) {
    1656:	5200 	movi	r1, 0
    1658:	43bf 	st	-2(r6), r1
    165a:	5a4e 	movi	r5, 78
    165c:	5b19 	movhi	r5, 25
    165e:	a143 	jmp	r5
                        if (tics_timer%divisores[fila]==0) {
    1660:	52a0 	movi	r1, -96
    1662:	5320 	movhi	r1, 32
    1664:	3240 	ld	r1, 0(r1)
    1666:	43b8 	st	-16(r6), r1
    1668:	39bf 	ld	r4, -2(r6)
    166a:	524e 	movi	r1, 78
    166c:	5320 	movhi	r1, 32
    166e:	43b6 	st	-20(r6), r1
    1670:	520f 	movi	r1, 15
    1672:	0258 	not	r1, r1
    1674:	2241 	addi	r1, r1, 1
    1676:	0731 	sha	r3, r4, r1
    1678:	2300 	addi	r1, r4, 0
    167a:	24c0 	addi	r2, r3, 0
    167c:	0661 	add	r3, r1, r1
    167e:	10e1 	cmpltu	r0, r3, r1
    1680:	08a2 	add	r4, r2, r2
    1682:	0224 	add	r1, r0, r4
    1684:	2840 	addi	r4, r1, 0
    1686:	35b6 	ld	r2, -20(r6)
    1688:	02a3 	add	r1, r2, r3
    168a:	3240 	ld	r1, 0(r1)
    168c:	2440 	addi	r2, r1, 0
    168e:	37b8 	ld	r3, -16(r6)
    1690:	82ea 	divu	r1, r3, r2
    1692:	8242 	mul	r1, r1, r2
    1694:	35b8 	ld	r2, -16(r6)
    1696:	02a9 	sub	r1, r2, r1
    1698:	5a48 	movi	r5, 72
    169a:	5b19 	movhi	r5, 25
    169c:	a341 	jnz	r1, r5
                            borrar_letra(fila,letra[fila].posicion);
    169e:	35bf 	ld	r2, -2(r6)
    16a0:	58b0 	movi	r4, -80
    16a2:	5920 	movhi	r4, 32
    16a4:	49b5 	st	-22(r6), r4
    16a6:	520f 	movi	r1, 15
    16a8:	0258 	not	r1, r1
    16aa:	2241 	addi	r1, r1, 1
    16ac:	02b1 	sha	r1, r2, r1
    16ae:	2680 	addi	r3, r2, 0
    16b0:	2840 	addi	r4, r1, 0
    16b2:	520e 	movi	r1, 14
    16b4:	0258 	not	r1, r1
    16b6:	2241 	addi	r1, r1, 1
    16b8:	02f9 	shl	r1, r3, r1
    16ba:	43b4 	st	-24(r6), r1
    16bc:	5002 	movi	r0, 2
    16be:	5202 	movi	r1, 2
    16c0:	43b3 	st	-26(r6), r1
    16c2:	0530 	sha	r2, r4, r0
    16c4:	31b4 	ld	r0, -24(r6)
    16c6:	040a 	or	r2, r0, r2
    16c8:	31b3 	ld	r0, -26(r6)
    16ca:	02f0 	sha	r1, r3, r0
    16cc:	37b5 	ld	r3, -22(r6)
    16ce:	02e1 	add	r1, r3, r1
    16d0:	3640 	ld	r3, 0(r1)
    16d2:	2ffc 	addi	r7, r7, -4
    16d4:	25c0 	addi	r2, r7, 0
    16d6:	33bf 	ld	r1, -2(r6)
    16d8:	4280 	st	0(r2), r1
    16da:	4681 	st	2(r2), r3
    16dc:	5214 	movi	r1, 20
    16de:	5311 	movhi	r1, 17
    16e0:	aa44 	jal	r5, r1
    16e2:	2fc4 	addi	r7, r7, 4
                            if (letra[fila].posicion<80)
    16e4:	35bf 	ld	r2, -2(r6)
    16e6:	58b0 	movi	r4, -80
    16e8:	5920 	movhi	r4, 32
    16ea:	49b2 	st	-28(r6), r4
    16ec:	520f 	movi	r1, 15
    16ee:	0258 	not	r1, r1
    16f0:	2241 	addi	r1, r1, 1
    16f2:	02b1 	sha	r1, r2, r1
    16f4:	2680 	addi	r3, r2, 0
    16f6:	2840 	addi	r4, r1, 0
    16f8:	520e 	movi	r1, 14
    16fa:	0258 	not	r1, r1
    16fc:	2241 	addi	r1, r1, 1
    16fe:	02f9 	shl	r1, r3, r1
    1700:	43b1 	st	-30(r6), r1
    1702:	5002 	movi	r0, 2
    1704:	5202 	movi	r1, 2
    1706:	43b0 	st	-32(r6), r1
    1708:	0530 	sha	r2, r4, r0
    170a:	31b1 	ld	r0, -30(r6)
    170c:	040a 	or	r2, r0, r2
    170e:	31b0 	ld	r0, -32(r6)
    1710:	02f0 	sha	r1, r3, r0
    1712:	37b2 	ld	r3, -28(r6)
    1714:	02e1 	add	r1, r3, r1
    1716:	3440 	ld	r2, 0(r1)
    1718:	524f 	movi	r1, 79
    171a:	1289 	cmple	r1, r2, r1
    171c:	5a9c 	movi	r5, -100
    171e:	5b17 	movhi	r5, 23
    1720:	a340 	jz	r1, r5
                                letra[fila].posicion++;
    1722:	39bf 	ld	r4, -2(r6)
    1724:	49b9 	st	-14(r6), r4
    1726:	50b0 	movi	r0, -80
    1728:	5120 	movhi	r0, 32
    172a:	41af 	st	-34(r6), r0
    172c:	520f 	movi	r1, 15
    172e:	0258 	not	r1, r1
    1730:	2241 	addi	r1, r1, 1
    1732:	35b9 	ld	r2, -14(r6)
    1734:	02b1 	sha	r1, r2, r1
    1736:	31b9 	ld	r0, -14(r6)
    1738:	2600 	addi	r3, r0, 0
    173a:	2840 	addi	r4, r1, 0
    173c:	520e 	movi	r1, 14
    173e:	0258 	not	r1, r1
    1740:	2241 	addi	r1, r1, 1
    1742:	02f9 	shl	r1, r3, r1
    1744:	43ae 	st	-36(r6), r1
    1746:	5002 	movi	r0, 2
    1748:	5202 	movi	r1, 2
    174a:	43ad 	st	-38(r6), r1
    174c:	0530 	sha	r2, r4, r0
    174e:	31ae 	ld	r0, -36(r6)
    1750:	040a 	or	r2, r0, r2
    1752:	31ad 	ld	r0, -38(r6)
    1754:	02f0 	sha	r1, r3, r0
    1756:	37af 	ld	r3, -34(r6)
    1758:	02e1 	add	r1, r3, r1
    175a:	3240 	ld	r1, 0(r1)
    175c:	2241 	addi	r1, r1, 1
    175e:	43ba 	st	-12(r6), r1
    1760:	58b0 	movi	r4, -80
    1762:	5920 	movhi	r4, 32
    1764:	49ac 	st	-40(r6), r4
    1766:	520f 	movi	r1, 15
    1768:	0258 	not	r1, r1
    176a:	2241 	addi	r1, r1, 1
    176c:	31b9 	ld	r0, -14(r6)
    176e:	0231 	sha	r1, r0, r1
    1770:	35b9 	ld	r2, -14(r6)
    1772:	2680 	addi	r3, r2, 0
    1774:	2840 	addi	r4, r1, 0
    1776:	520e 	movi	r1, 14
    1778:	0258 	not	r1, r1
    177a:	2241 	addi	r1, r1, 1
    177c:	02f9 	shl	r1, r3, r1
    177e:	43ab 	st	-42(r6), r1
    1780:	5002 	movi	r0, 2
    1782:	5202 	movi	r1, 2
    1784:	43aa 	st	-44(r6), r1
    1786:	0530 	sha	r2, r4, r0
    1788:	31ab 	ld	r0, -42(r6)
    178a:	040a 	or	r2, r0, r2
    178c:	31aa 	ld	r0, -44(r6)
    178e:	02f0 	sha	r1, r3, r0
    1790:	37ac 	ld	r3, -40(r6)
    1792:	02e1 	add	r1, r3, r1
    1794:	39ba 	ld	r4, -12(r6)
    1796:	4840 	st	0(r1), r4
    1798:	5a00 	movi	r5, 0
    179a:	6a1b 	bz	r5, 56
                            else
                                letra[fila].posicion=0;
    179c:	35bf 	ld	r2, -2(r6)
    179e:	50b0 	movi	r0, -80
    17a0:	5120 	movhi	r0, 32
    17a2:	41a9 	st	-46(r6), r0
    17a4:	520f 	movi	r1, 15
    17a6:	0258 	not	r1, r1
    17a8:	2241 	addi	r1, r1, 1
    17aa:	02b1 	sha	r1, r2, r1
    17ac:	2680 	addi	r3, r2, 0
    17ae:	2840 	addi	r4, r1, 0
    17b0:	520e 	movi	r1, 14
    17b2:	0258 	not	r1, r1
    17b4:	2241 	addi	r1, r1, 1
    17b6:	02f9 	shl	r1, r3, r1
    17b8:	43a8 	st	-48(r6), r1
    17ba:	5002 	movi	r0, 2
    17bc:	5202 	movi	r1, 2
    17be:	43a7 	st	-50(r6), r1
    17c0:	0530 	sha	r2, r4, r0
    17c2:	31a8 	ld	r0, -48(r6)
    17c4:	040a 	or	r2, r0, r2
    17c6:	31a7 	ld	r0, -50(r6)
    17c8:	02f0 	sha	r1, r3, r0
    17ca:	37a9 	ld	r3, -46(r6)
    17cc:	04e1 	add	r2, r3, r1
    17ce:	5200 	movi	r1, 0
    17d0:	4280 	st	0(r2), r1

                            mostrar_nueva_posicion(fila,letra[fila].posicion,letra[fila].caracter,letra[fila].color);
    17d2:	35bf 	ld	r2, -2(r6)
    17d4:	58b0 	movi	r4, -80
    17d6:	5920 	movhi	r4, 32
    17d8:	49a6 	st	-52(r6), r4
    17da:	520f 	movi	r1, 15
    17dc:	0258 	not	r1, r1
    17de:	2241 	addi	r1, r1, 1
    17e0:	02b1 	sha	r1, r2, r1
    17e2:	2680 	addi	r3, r2, 0
    17e4:	2840 	addi	r4, r1, 0
    17e6:	520e 	movi	r1, 14
    17e8:	0258 	not	r1, r1
    17ea:	2241 	addi	r1, r1, 1
    17ec:	02f9 	shl	r1, r3, r1
    17ee:	43a5 	st	-54(r6), r1
    17f0:	5002 	movi	r0, 2
    17f2:	5202 	movi	r1, 2
    17f4:	43a4 	st	-56(r6), r1
    17f6:	0530 	sha	r2, r4, r0
    17f8:	31a5 	ld	r0, -54(r6)
    17fa:	040a 	or	r2, r0, r2
    17fc:	31a4 	ld	r0, -56(r6)
    17fe:	02f0 	sha	r1, r3, r0
    1800:	37a6 	ld	r3, -52(r6)
    1802:	02e1 	add	r1, r3, r1
    1804:	3240 	ld	r1, 0(r1)
    1806:	43bb 	st	-10(r6), r1
    1808:	39bf 	ld	r4, -2(r6)
    180a:	50b0 	movi	r0, -80
    180c:	5120 	movhi	r0, 32
    180e:	41a3 	st	-58(r6), r0
    1810:	520f 	movi	r1, 15
    1812:	0258 	not	r1, r1
    1814:	2241 	addi	r1, r1, 1
    1816:	0731 	sha	r3, r4, r1
    1818:	2300 	addi	r1, r4, 0
    181a:	24c0 	addi	r2, r3, 0
    181c:	560e 	movi	r3, 14
    181e:	06d8 	not	r3, r3
    1820:	26c1 	addi	r3, r3, 1
    1822:	067b 	shl	r3, r1, r3
    1824:	47a2 	st	-60(r6), r3
    1826:	5002 	movi	r0, 2
    1828:	5602 	movi	r3, 2
    182a:	47a1 	st	-62(r6), r3
    182c:	08b0 	sha	r4, r2, r0
    182e:	31a2 	ld	r0, -60(r6)
    1830:	080c 	or	r4, r0, r4
    1832:	31a1 	ld	r0, -62(r6)
    1834:	0670 	sha	r3, r1, r0
    1836:	5402 	movi	r2, 2
    1838:	52be 	movi	r1, -66
    183a:	0266 	add	r1, r1, r6
    183c:	4440 	st	0(r1), r2
    183e:	5000 	movi	r0, 0
    1840:	41a0 	st	-64(r6), r0
    1842:	52be 	movi	r1, -66
    1844:	0266 	add	r1, r1, r6
    1846:	3240 	ld	r1, 0(r1)
    1848:	04e1 	add	r2, r3, r1
    184a:	52ae 	movi	r1, -82
    184c:	0266 	add	r1, r1, r6
    184e:	4440 	st	0(r1), r2
    1850:	54ae 	movi	r2, -82
    1852:	04a6 	add	r2, r2, r6
    1854:	3480 	ld	r2, 0(r2)
    1856:	10a3 	cmpltu	r0, r2, r3
    1858:	54b2 	movi	r2, -78
    185a:	04a6 	add	r2, r2, r6
    185c:	4080 	st	0(r2), r0
    185e:	31a0 	ld	r0, -64(r6)
    1860:	0320 	add	r1, r4, r0
    1862:	50b0 	movi	r0, -80
    1864:	0026 	add	r0, r0, r6
    1866:	4200 	st	0(r0), r1
    1868:	52b2 	movi	r1, -78
    186a:	0266 	add	r1, r1, r6
    186c:	3440 	ld	r2, 0(r1)
    186e:	52b0 	movi	r1, -80
    1870:	0266 	add	r1, r1, r6
    1872:	3240 	ld	r1, 0(r1)
    1874:	06a1 	add	r3, r2, r1
    1876:	28c0 	addi	r4, r3, 0
    1878:	54b0 	movi	r2, -80
    187a:	04a6 	add	r2, r2, r6
    187c:	4880 	st	0(r2), r4
    187e:	35a3 	ld	r2, -58(r6)
    1880:	50ae 	movi	r0, -82
    1882:	0026 	add	r0, r0, r6
    1884:	3000 	ld	r0, 0(r0)
    1886:	02a0 	add	r1, r2, r0
    1888:	d240 	ldb	r1, 0(r1)
    188a:	43bc 	st	-8(r6), r1
    188c:	39bf 	ld	r4, -2(r6)
    188e:	54b0 	movi	r2, -80
    1890:	5520 	movhi	r2, 32
    1892:	52bc 	movi	r1, -68
    1894:	0266 	add	r1, r1, r6
    1896:	4440 	st	0(r1), r2
    1898:	520f 	movi	r1, 15
    189a:	0258 	not	r1, r1
    189c:	2241 	addi	r1, r1, 1
    189e:	0731 	sha	r3, r4, r1
    18a0:	2300 	addi	r1, r4, 0
    18a2:	24c0 	addi	r2, r3, 0
    18a4:	560e 	movi	r3, 14
    18a6:	06d8 	not	r3, r3
    18a8:	26c1 	addi	r3, r3, 1
    18aa:	007b 	shl	r0, r1, r3
    18ac:	58ba 	movi	r4, -70
    18ae:	0926 	add	r4, r4, r6
    18b0:	4100 	st	0(r4), r0
    18b2:	5002 	movi	r0, 2
    18b4:	5802 	movi	r4, 2
    18b6:	56b8 	movi	r3, -72
    18b8:	06e6 	add	r3, r3, r6
    18ba:	48c0 	st	0(r3), r4
    18bc:	08b0 	sha	r4, r2, r0
    18be:	50ba 	movi	r0, -70
    18c0:	0026 	add	r0, r0, r6
    18c2:	3000 	ld	r0, 0(r0)
    18c4:	080c 	or	r4, r0, r4
    18c6:	50b8 	movi	r0, -72
    18c8:	0026 	add	r0, r0, r6
    18ca:	3000 	ld	r0, 0(r0)
    18cc:	0670 	sha	r3, r1, r0
    18ce:	5402 	movi	r2, 2
    18d0:	52b4 	movi	r1, -76
    18d2:	0266 	add	r1, r1, r6
    18d4:	4440 	st	0(r1), r2
    18d6:	5200 	movi	r1, 0
    18d8:	50b6 	movi	r0, -74
    18da:	0026 	add	r0, r0, r6
    18dc:	4200 	st	0(r0), r1
    18de:	54b4 	movi	r2, -76
    18e0:	04a6 	add	r2, r2, r6
    18e2:	3480 	ld	r2, 0(r2)
    18e4:	00e2 	add	r0, r3, r2
    18e6:	54ae 	movi	r2, -82
    18e8:	04a6 	add	r2, r2, r6
    18ea:	4080 	st	0(r2), r0
    18ec:	50ae 	movi	r0, -82
    18ee:	0026 	add	r0, r0, r6
    18f0:	3000 	ld	r0, 0(r0)
    18f2:	1223 	cmpltu	r1, r0, r3
    18f4:	50b2 	movi	r0, -78
    18f6:	0026 	add	r0, r0, r6
    18f8:	4200 	st	0(r0), r1
    18fa:	52b6 	movi	r1, -74
    18fc:	0266 	add	r1, r1, r6
    18fe:	3240 	ld	r1, 0(r1)
    1900:	0521 	add	r2, r4, r1
    1902:	52b0 	movi	r1, -80
    1904:	0266 	add	r1, r1, r6
    1906:	4440 	st	0(r1), r2
    1908:	54b2 	movi	r2, -78
    190a:	04a6 	add	r2, r2, r6
    190c:	3880 	ld	r4, 0(r2)
    190e:	54b0 	movi	r2, -80
    1910:	04a6 	add	r2, r2, r6
    1912:	3480 	ld	r2, 0(r2)
    1914:	0722 	add	r3, r4, r2
    1916:	20c0 	addi	r0, r3, 0
    1918:	58b0 	movi	r4, -80
    191a:	0926 	add	r4, r4, r6
    191c:	4100 	st	0(r4), r0
    191e:	54bc 	movi	r2, -68
    1920:	04a6 	add	r2, r2, r6
    1922:	3680 	ld	r3, 0(r2)
    1924:	54ae 	movi	r2, -82
    1926:	04a6 	add	r2, r2, r6
    1928:	3480 	ld	r2, 0(r2)
    192a:	02e2 	add	r1, r3, r2
    192c:	d641 	ldb	r3, 1(r1)
    192e:	2ffa 	addi	r7, r7, -6
    1930:	23c0 	addi	r1, r7, 0
    1932:	35bf 	ld	r2, -2(r6)
    1934:	4440 	st	0(r1), r2
    1936:	39bb 	ld	r4, -10(r6)
    1938:	4841 	st	2(r1), r4
    193a:	31bc 	ld	r0, -8(r6)
    193c:	e044 	stb	4(r1), r0
    193e:	e645 	stb	5(r1), r3
    1940:	5256 	movi	r1, 86
    1942:	5311 	movhi	r1, 17
    1944:	aa44 	jal	r5, r1
    1946:	2fc6 	addi	r7, r7, 6
    1948:	33bf 	ld	r1, -2(r6)
    194a:	2241 	addi	r1, r1, 1
    194c:	43bf 	st	-2(r6), r1
    194e:	33bf 	ld	r1, -2(r6)
    1950:	540b 	movi	r2, 11
    1952:	124a 	cmple	r1, r1, r2
    1954:	5a60 	movi	r5, 96
    1956:	5b16 	movhi	r5, 22
    1958:	a341 	jnz	r1, r5
                        }
                    }
                }
            }
        }
    195a:	5aca 	movi	r5, -54
    195c:	5b15 	movhi	r5, 21
    195e:	a143 	jmp	r5

temp_corre_letras.o:     format de fixer elf32-sisa
temp_corre_letras.o
arquitectura: sisa:3, senyaladors 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
adre√ßa d'inici 0x00000000

Program Header:
    LOAD off    0x00000000 vaddr 0x00000f6c paddr 0x00000f6c align 2**0
         filesz 0x000009f4 memsz 0x000009f4 flags r-x
    LOAD off    0x000009f4 vaddr 0x00002000 paddr 0x00002000 align 2**0
         filesz 0x00000094 memsz 0x00000094 flags rw-
    LOAD off    0x00000a80 vaddr 0x000020a0 paddr 0x000020a0 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-

Seccions:
Nom Idx           Mida      VMA       LMA       Des. Fit. Alin.  Senyaladors
  0 .sistema      00000960  00001000  00001000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sysdata      00000094  00002000  00002000  000009f4  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  000020a0  000020a0  00000a88  2**4  ALLOC
  3 .stab         000007bc  000020e0  000020e0  00000a88  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005a2  0000289c  0000289c  00001244  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00002000 l    d  .sysdata	00000000 .sysdata
00002000 l       .sysdata	00000000 interrupts_vector
00002008 l       .sysdata	00000000 exceptions_vector
00002024 l       .sysdata	00000000 call_sys_vector
00002068 g     O .sysdata	0000002b mensaje
00002034 g     O .sysdata	0000000d letras
00002041 g     O .sysdata	0000000d colores
0000204e g     O .sysdata	0000001a divisores


Disassembly of section .sysdata:

00002000 <interrupts_vector>:
                        }
                    }
                }
            }
        }
    2000:	10a2 	cmpltu	r0, r2, r2
    2002:	1018 	cmpeq	r0, r0, r0
    2004:	1018 	cmpeq	r0, r0, r0
    2006:	10d8 	cmpeq	r0, r3, r0

00002008 <exceptions_vector>:
    2008:	101a 	cmpeq	r0, r0, r2
    200a:	101a 	cmpeq	r0, r0, r2
    200c:	101c 	cmpeq	r0, r0, r4
    200e:	101c 	cmpeq	r0, r0, r4
    2010:	101a 	cmpeq	r0, r0, r2
    2012:	101a 	cmpeq	r0, r0, r2
    2014:	101e 	cmpeq	r0, r0, r6
    2016:	101e 	cmpeq	r0, r0, r6
    2018:	101e 	cmpeq	r0, r0, r6
    201a:	101e 	cmpeq	r0, r0, r6
    201c:	101a 	cmpeq	r0, r0, r2
    201e:	101a 	cmpeq	r0, r0, r2
    2020:	101a 	cmpeq	r0, r0, r2
    2022:	101a 	cmpeq	r0, r0, r2

00002024 <call_sys_vector>:
    2024:	101c 	cmpeq	r0, r0, r4
    2026:	101c 	cmpeq	r0, r0, r4
    2028:	101c 	cmpeq	r0, r0, r4
    202a:	101c 	cmpeq	r0, r0, r4
    202c:	101c 	cmpeq	r0, r0, r4
    202e:	101c 	cmpeq	r0, r0, r4
    2030:	101c 	cmpeq	r0, r0, r4
    2032:	101c 	cmpeq	r0, r0, r4

00002034 <letras>:
    2034:	4241 4443 4645 4847 4a49 4c4b 3f4d               ABCDEFGHIJKLM

00002041 <colores>:
    2041:	033f 300c 3c15 2a0f 3f2a 211a 012b               ?..0.<.**?.!+

0000204e <divisores>:
    204e:	0001 0002 0003 0004 0005 0006 0007 0008     ................
    205e:	0009 000a 000b 000c 000d                    ..........

00002068 <mensaje>:
    2068:	7570 736c 2061 5227 2027 6170 6172 7220     pulsa 'R' para r
    2078:	6965 696e 6963 7261 6f20 2720 2750 7020     einiciar o 'P' p
    2088:	7261 2061 6170 7375 2e61 0000               ara pausa...
