
temp_corre_letras.o:     file format elf32-sisa
temp_corre_letras.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000074 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x0000087e memsz 0x0000087e flags r-x
    LOAD off    0x00000900 vaddr 0x00001000 paddr 0x00001000 align 2**0
         filesz 0x00000060 memsz 0x000000a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .code         0000087e  00000000  00000000  00000074  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00001000  00001000  00000900  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00001060  00001060  00000960  2**4  ALLOC
  3 .stab         000007bc  000010a0  000010a0  00000960  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005b6  0000185c  0000185c  0000111c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .code	00000000 .code
0000001e l       .code	00000000 __repe
000004c6 g       .code	00000000 __entry_point
00000192 g     F .code	00000334 reset_corre_letras
000000f6 g     F .code	0000009c write
000004c6 g     F .code	000003b8 main
000000be g     F .code	00000038 strlen_s
00000074 g     F .code	0000004a mostrar_nueva_posicion
00000032 g     F .code	00000042 borrar_letra
00000000 g     F .code	00000032 clear_screen


Disassembly of section .code:

00000000 <clear_screen>:
* Borra la pantalla: Escribe 80x30 caracteres (espacios con   *
* fondo negro) en la memoria de la pantalla (0xA000)          *
**************************************************************/ 
void clear_screen(void)
{
   0:	2ff2 	addi	r7, r7, -14
   2:	4bc6 	st	12(r7), r5
   4:	4dc5 	st	10(r7), r6
   6:	2dca 	addi	r6, r7, 10
   8:	45c1 	st	2(r7), r2
   a:	47c0 	st	0(r7), r3
    int aux1, aux2, aux3;

    __asm__ (  
   c:	37bd 	ld	r3, -6(r6)
   e:	35be 	ld	r2, -4(r6)
  10:	33bf 	ld	r1, -2(r6)
  12:	5600 	movi	r3, 0
  14:	57a0 	movhi	r3, -96
  16:	5460 	movi	r2, 96
  18:	5509 	movhi	r2, 9
  1a:	5220 	movi	r1, 32
  1c:	5300 	movhi	r1, 0

0000001e <__repe>:
  1e:	42c0 	st	0(r3), r1
  20:	26c2 	addi	r3, r3, 2
  22:	24bf 	addi	r2, r2, -1
  24:	65fc 	bnz	r2, -6	<__repe>
            "movi  %0, lo(0xA000)\n\t"   //0xA000 direccion de inicio de la memoria de video
            "movhi %0, hi(0xA000)\n\t"
            "movi  %1, lo(2400)\n\t"     //(80*30=2400=0x0960) numero caracteres de la pantalla
            "movhi %1, hi(2400)\n\t"
            "movi  %2, lo(0x0020)\n\t"
            "movhi %2, hi(0x0020)\n\t"   //un espacio en color negro
            "__repe: st 0(%0), %2\n\t"
            "addi  %0, %0,2\n\t"
            "addi  %1, %1,-1\n\t"
            "bnz   %1, __repe\n\t"
            : /* sin salidas*/
            : "r" (aux1),
              "r" (aux2),
              "r" (aux3));  
}
  26:	35c1 	ld	r2, 2(r7)
  28:	37c0 	ld	r3, 0(r7)
  2a:	3dc5 	ld	r6, 10(r7)
  2c:	3bc6 	ld	r5, 12(r7)
  2e:	2fce 	addi	r7, r7, 14
  30:	a143 	jmp	r5

00000032 <borrar_letra>:


/**************************************************************
* Borra un caracter en la pantalla: Escribe un espacio con    *
* fondo negro en la fila y columnas indicadas                 *
**************************************************************/ 
void borrar_letra(int fila, int col)
{
  32:	2ff4 	addi	r7, r7, -12
  34:	4bc5 	st	10(r7), r5
  36:	4dc4 	st	8(r7), r6
  38:	2dc8 	addi	r6, r7, 8
  3a:	41c1 	st	2(r7), r0
  3c:	45c0 	st	0(r7), r2
    int valor;
    int pos;

    valor=0x0020;               //un espacio en color negro
  3e:	5220 	movi	r1, 32
  40:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;        // cada caracter ocupa 2 bytes de memoria de video
  42:	3382 	ld	r1, 4(r6)
  44:	2440 	addi	r2, r1, 0
  46:	5204 	movi	r1, 4
  48:	04b1 	sha	r2, r2, r1
  4a:	5202 	movi	r1, 2
  4c:	02b1 	sha	r1, r2, r1
  4e:	04a1 	add	r2, r2, r1
  50:	3383 	ld	r1, 6(r6)
  52:	02a1 	add	r1, r2, r1
  54:	0261 	add	r1, r1, r1
  56:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;           // la memoria de video empieza en la direccion 0xA000 (40960)
  58:	33bf 	ld	r1, -2(r6)
  5a:	5400 	movi	r2, 0
  5c:	55a0 	movhi	r2, -96
  5e:	0262 	add	r1, r1, r2
  60:	43bf 	st	-2(r6), r1

    __asm__ (
  62:	31bf 	ld	r0, -2(r6)
  64:	33be 	ld	r1, -4(r6)
  66:	4200 	st	0(r0), r1
            "st 0(%0), %1"      // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (valor));  
}
  68:	31c1 	ld	r0, 2(r7)
  6a:	35c0 	ld	r2, 0(r7)
  6c:	3dc4 	ld	r6, 8(r7)
  6e:	3bc5 	ld	r5, 10(r7)
  70:	2fcc 	addi	r7, r7, 12
  72:	a143 	jmp	r5

00000074 <mostrar_nueva_posicion>:


/*******************************************************************
* Muestra un caracter en la pantalla: Escribe el caracter recibido *
* con el color y fondo indicados en la fila y columnas indicadas   *
*******************************************************************/ 
void mostrar_nueva_posicion(int fila, int col, char c, char color)
{
  74:	2ff4 	addi	r7, r7, -12
  76:	4bc5 	st	10(r7), r5
  78:	4dc4 	st	8(r7), r6
  7a:	2dc8 	addi	r6, r7, 8
  7c:	41c1 	st	2(r7), r0
  7e:	45c0 	st	0(r7), r2
    int caracter_compuesto;
    int pos;

    caracter_compuesto=color*256+c;
  80:	d589 	ldb	r2, 9(r6)
  82:	5208 	movi	r1, 8
  84:	04b1 	sha	r2, r2, r1
  86:	d388 	ldb	r1, 8(r6)
  88:	02a1 	add	r1, r2, r1
  8a:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;           // cada caracter ocupa 2 bytes de memoria de video
  8c:	3382 	ld	r1, 4(r6)
  8e:	2440 	addi	r2, r1, 0
  90:	5204 	movi	r1, 4
  92:	04b1 	sha	r2, r2, r1
  94:	5202 	movi	r1, 2
  96:	02b1 	sha	r1, r2, r1
  98:	04a1 	add	r2, r2, r1
  9a:	3383 	ld	r1, 6(r6)
  9c:	02a1 	add	r1, r2, r1
  9e:	0261 	add	r1, r1, r1
  a0:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;              // la memoria de video empieza en la direccion 0xA000 (40960)
  a2:	33bf 	ld	r1, -2(r6)
  a4:	5400 	movi	r2, 0
  a6:	55a0 	movhi	r2, -96
  a8:	0262 	add	r1, r1, r2
  aa:	43bf 	st	-2(r6), r1

    __asm__ (
  ac:	31bf 	ld	r0, -2(r6)
  ae:	33be 	ld	r1, -4(r6)
  b0:	4200 	st	0(r0), r1
            "st 0(%0), %1"         // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                   // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (caracter_compuesto));  
}
  b2:	31c1 	ld	r0, 2(r7)
  b4:	35c0 	ld	r2, 0(r7)
  b6:	3dc4 	ld	r6, 8(r7)
  b8:	3bc5 	ld	r5, 10(r7)
  ba:	2fcc 	addi	r7, r7, 12
  bc:	a143 	jmp	r5

000000be <strlen_s>:


/*****************************************************************
* Devuelve la longitud de una cadena de caracteres *
******************************************************************/ 
int strlen_s(char *str)
{
  be:	2ff8 	addi	r7, r7, -8
  c0:	4bc3 	st	6(r7), r5
  c2:	4dc2 	st	4(r7), r6
  c4:	2dc4 	addi	r6, r7, 4
  c6:	45c0 	st	0(r7), r2
  int len;
  for (len = 0; *str++; len++);
  c8:	5200 	movi	r1, 0
  ca:	43bf 	st	-2(r6), r1
  cc:	5a00 	movi	r5, 0
  ce:	6a03 	bz	r5, 8
  d0:	33bf 	ld	r1, -2(r6)
  d2:	2241 	addi	r1, r1, 1
  d4:	43bf 	st	-2(r6), r1
  d6:	3382 	ld	r1, 4(r6)
  d8:	d440 	ldb	r2, 0(r1)
  da:	5200 	movi	r1, 0
  dc:	1299 	cmpeq	r1, r2, r1
  de:	0258 	not	r1, r1
  e0:	2242 	addi	r1, r1, 2
  e2:	3382 	ld	r1, 4(r6)
  e4:	2241 	addi	r1, r1, 1
  e6:	4382 	st	4(r6), r1
  e8:	65f3 	bnz	r2, -24
  return len;
  ea:	33bf 	ld	r1, -2(r6)
}
  ec:	35c0 	ld	r2, 0(r7)
  ee:	3dc2 	ld	r6, 4(r7)
  f0:	3bc3 	ld	r5, 6(r7)
  f2:	2fc8 	addi	r7, r7, 8
  f4:	a143 	jmp	r5

000000f6 <write>:


/*****************************************************************
* Muestra una cadena de caracteres en la pantalla con el color y *
* el fondo indicados empezando la fila y columnas indicadas      *
******************************************************************/ 
int write(int fila, int col, char *buf, int size, char color)
{
  f6:	2fee 	addi	r7, r7, -18
  f8:	4bc8 	st	16(r7), r5
  fa:	4dc7 	st	14(r7), r6
  fc:	2dce 	addi	r6, r7, 14
  fe:	45c1 	st	2(r7), r2
 100:	47c0 	st	0(r7), r3
  int i, t;
  int f, c, car;
  t = 0; f = fila; c = col;
 102:	5200 	movi	r1, 0
 104:	43bc 	st	-8(r6), r1
 106:	3382 	ld	r1, 4(r6)
 108:	43bd 	st	-6(r6), r1
 10a:	3383 	ld	r1, 6(r6)
 10c:	43be 	st	-4(r6), r1
  for (i=0; i<size; i++)   
 10e:	5200 	movi	r1, 0
 110:	43bb 	st	-10(r6), r1
 112:	5a78 	movi	r5, 120
 114:	5b01 	movhi	r5, 1
 116:	a143 	jmp	r5
    {
      car = buf[i];
 118:	35bb 	ld	r2, -10(r6)
 11a:	3384 	ld	r1, 8(r6)
 11c:	02a1 	add	r1, r2, r1
 11e:	d240 	ldb	r1, 0(r1)
 120:	43bf 	st	-2(r6), r1
      mostrar_nueva_posicion(f, c, car, color);
 122:	33bf 	ld	r1, -2(r6)
 124:	2640 	addi	r3, r1, 0
 126:	2ffa 	addi	r7, r7, -6
 128:	25c0 	addi	r2, r7, 0
 12a:	33bd 	ld	r1, -6(r6)
 12c:	4280 	st	0(r2), r1
 12e:	33be 	ld	r1, -4(r6)
 130:	4281 	st	2(r2), r1
 132:	e684 	stb	4(r2), r3
 134:	d38c 	ldb	r1, 12(r6)
 136:	e285 	stb	5(r2), r1
 138:	5274 	movi	r1, 116
 13a:	5300 	movhi	r1, 0
 13c:	aa44 	jal	r5, r1
 13e:	2fc6 	addi	r7, r7, 6
      t++;
 140:	33bc 	ld	r1, -8(r6)
 142:	2241 	addi	r1, r1, 1
 144:	43bc 	st	-8(r6), r1
      if (car=='\n') f++;
 146:	35bf 	ld	r2, -2(r6)
 148:	520a 	movi	r1, 10
 14a:	1299 	cmpeq	r1, r2, r1
 14c:	6205 	bz	r1, 12
 14e:	33bd 	ld	r1, -6(r6)
 150:	2241 	addi	r1, r1, 1
 152:	43bd 	st	-6(r6), r1
 154:	5a00 	movi	r5, 0
 156:	6a0d 	bz	r5, 28
      else if (car=='\r') c=1;
 158:	33bf 	ld	r1, -2(r6)
 15a:	540d 	movi	r2, 13
 15c:	125a 	cmpeq	r1, r1, r2
 15e:	6204 	bz	r1, 10
 160:	5201 	movi	r1, 1
 162:	43be 	st	-4(r6), r1
 164:	5a00 	movi	r5, 0
 166:	6a05 	bz	r5, 12
      else if (car!=0) c++;   
 168:	33bf 	ld	r1, -2(r6)
 16a:	6203 	bz	r1, 8
 16c:	33be 	ld	r1, -4(r6)
 16e:	2241 	addi	r1, r1, 1
 170:	43be 	st	-4(r6), r1
 172:	33bb 	ld	r1, -10(r6)
 174:	2241 	addi	r1, r1, 1
 176:	43bb 	st	-10(r6), r1
 178:	33bb 	ld	r1, -10(r6)
 17a:	3585 	ld	r2, 10(r6)
 17c:	1242 	cmplt	r1, r1, r2
 17e:	5a18 	movi	r5, 24
 180:	5b01 	movhi	r5, 1
 182:	a341 	jnz	r1, r5
    }

  return t;
 184:	33bc 	ld	r1, -8(r6)
}
 186:	35c1 	ld	r2, 2(r7)
 188:	37c0 	ld	r3, 0(r7)
 18a:	3dc7 	ld	r6, 14(r7)
 18c:	3bc8 	ld	r5, 16(r7)
 18e:	2fd2 	addi	r7, r7, 18
 190:	a143 	jmp	r5

00000192 <reset_corre_letras>:




#define ANCHO_PANTALLA  80
#define LIMITE_LETRAS   13

/* colores */
#define NEGRO           0x00
#define BLANCO          0x3F
#define ROJO            0x03
#define VERDE           0x0C
#define AZUL            0x30
#define GRIS_OSCURO     0x15
#define AZUL_CIELO      0x3C
#define AMARILLO        0x0F
#define LILA            0x2A
#define GRIS_CLARO      0x2A
#define GRIS_MUY_CLARO  0x3F

char letras[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M'};
char colores[] = {BLANCO, ROJO, VERDE, AZUL, GRIS_OSCURO, AZUL_CIELO, AMARILLO, LILA, GRIS_CLARO, GRIS_MUY_CLARO, 0x1A, 0X21, 0X2B};
int divisores[] = {1,2,3,4,5,6,7,8,9,10,11,12,13};
char mensaje[] = "pulsa 'R' para reiniciar o 'P' para pausa.";

unsigned int tics_timer=0;     //variable global cuyo valor es modificado por la interrupcion de reloj
unsigned int tecla_pulsada=0;  //variable global cuyo valor es modificado por la interrupcion de teclado

struct letra_t
{
    int posicion;    // posicion dentro la linea
    char caracter;   // caracter a mostrar
    char color;      // color caracter

};

#define NUMERO_LETRAS  12
struct letra_t  letra[NUMERO_LETRAS];


void reset_corre_letras(void)
{
 192:	2fe0 	addi	r7, r7, -32
 194:	4bcf 	st	30(r7), r5
 196:	4dce 	st	28(r7), r6
 198:	2ddc 	addi	r6, r7, 28
 19a:	5acc 	movi	r5, -52
 19c:	0fe5 	add	r7, r7, r5
 19e:	41c3 	st	6(r7), r0
 1a0:	45c2 	st	4(r7), r2
 1a2:	47c1 	st	2(r7), r3
 1a4:	49c0 	st	0(r7), r4
    clear_screen();      // borrar pantalla
 1a6:	5200 	movi	r1, 0
 1a8:	5300 	movhi	r1, 0
 1aa:	aa44 	jal	r5, r1

    write(15, 19, mensaje, strlen_s(mensaje), ROJO);
 1ac:	2ffe 	addi	r7, r7, -2
 1ae:	25c0 	addi	r2, r7, 0
 1b0:	5234 	movi	r1, 52
 1b2:	5310 	movhi	r1, 16
 1b4:	4280 	st	0(r2), r1
 1b6:	52be 	movi	r1, -66
 1b8:	5300 	movhi	r1, 0
 1ba:	aa44 	jal	r5, r1
 1bc:	2fc2 	addi	r7, r7, 2
 1be:	2640 	addi	r3, r1, 0
 1c0:	2ff6 	addi	r7, r7, -10
 1c2:	25c0 	addi	r2, r7, 0
 1c4:	520f 	movi	r1, 15
 1c6:	4280 	st	0(r2), r1
 1c8:	5213 	movi	r1, 19
 1ca:	4281 	st	2(r2), r1
 1cc:	5234 	movi	r1, 52
 1ce:	5310 	movhi	r1, 16
 1d0:	4282 	st	4(r2), r1
 1d2:	4683 	st	6(r2), r3
 1d4:	5203 	movi	r1, 3
 1d6:	e288 	stb	8(r2), r1
 1d8:	52f6 	movi	r1, -10
 1da:	5300 	movhi	r1, 0
 1dc:	aa44 	jal	r5, r1
 1de:	2fca 	addi	r7, r7, 10
    int i;    
    for (i=0; i<NUMERO_LETRAS; i++) {
 1e0:	5200 	movi	r1, 0
 1e2:	43bf 	st	-2(r6), r1
 1e4:	5aa8 	movi	r5, -88
 1e6:	5b04 	movhi	r5, 4
 1e8:	a143 	jmp	r5
        letra[i].posicion=0;
 1ea:	35bf 	ld	r2, -2(r6)
 1ec:	5070 	movi	r0, 112
 1ee:	5110 	movhi	r0, 16
 1f0:	41b8 	st	-16(r6), r0
 1f2:	520f 	movi	r1, 15
 1f4:	0258 	not	r1, r1
 1f6:	2241 	addi	r1, r1, 1
 1f8:	02b1 	sha	r1, r2, r1
 1fa:	2680 	addi	r3, r2, 0
 1fc:	2840 	addi	r4, r1, 0
 1fe:	520e 	movi	r1, 14
 200:	0258 	not	r1, r1
 202:	2241 	addi	r1, r1, 1
 204:	02f9 	shl	r1, r3, r1
 206:	43b7 	st	-18(r6), r1
 208:	5002 	movi	r0, 2
 20a:	5202 	movi	r1, 2
 20c:	43b6 	st	-20(r6), r1
 20e:	0530 	sha	r2, r4, r0
 210:	31b7 	ld	r0, -18(r6)
 212:	040a 	or	r2, r0, r2
 214:	31b6 	ld	r0, -20(r6)
 216:	02f0 	sha	r1, r3, r0
 218:	37b8 	ld	r3, -16(r6)
 21a:	04e1 	add	r2, r3, r1
 21c:	5200 	movi	r1, 0
 21e:	4280 	st	0(r2), r1
        letra[i].caracter=letras[i];
 220:	39bf 	ld	r4, -2(r6)
 222:	49b9 	st	-14(r6), r4
 224:	39bf 	ld	r4, -2(r6)
 226:	5000 	movi	r0, 0
 228:	5110 	movhi	r0, 16
 22a:	520f 	movi	r1, 15
 22c:	0258 	not	r1, r1
 22e:	2241 	addi	r1, r1, 1
 230:	0731 	sha	r3, r4, r1
 232:	2300 	addi	r1, r4, 0
 234:	24c0 	addi	r2, r3, 0
 236:	0221 	add	r1, r0, r1
 238:	d240 	ldb	r1, 0(r1)
 23a:	43ba 	st	-12(r6), r1
 23c:	5070 	movi	r0, 112
 23e:	5110 	movhi	r0, 16
 240:	41b5 	st	-22(r6), r0
 242:	520f 	movi	r1, 15
 244:	0258 	not	r1, r1
 246:	2241 	addi	r1, r1, 1
 248:	35b9 	ld	r2, -14(r6)
 24a:	06b1 	sha	r3, r2, r1
 24c:	39b9 	ld	r4, -14(r6)
 24e:	2300 	addi	r1, r4, 0
 250:	24c0 	addi	r2, r3, 0
 252:	560e 	movi	r3, 14
 254:	06d8 	not	r3, r3
 256:	26c1 	addi	r3, r3, 1
 258:	067b 	shl	r3, r1, r3
 25a:	47b4 	st	-24(r6), r3
 25c:	5002 	movi	r0, 2
 25e:	5602 	movi	r3, 2
 260:	47b3 	st	-26(r6), r3
 262:	08b0 	sha	r4, r2, r0
 264:	31b4 	ld	r0, -24(r6)
 266:	080c 	or	r4, r0, r4
 268:	31b3 	ld	r0, -26(r6)
 26a:	0670 	sha	r3, r1, r0
 26c:	5202 	movi	r1, 2
 26e:	43b1 	st	-30(r6), r1
 270:	5400 	movi	r2, 0
 272:	45b2 	st	-28(r6), r2
 274:	31b1 	ld	r0, -30(r6)
 276:	02e0 	add	r1, r3, r0
 278:	50b8 	movi	r0, -72
 27a:	0026 	add	r0, r0, r6
 27c:	4200 	st	0(r0), r1
 27e:	52b8 	movi	r1, -72
 280:	0266 	add	r1, r1, r6
 282:	3240 	ld	r1, 0(r1)
 284:	1463 	cmpltu	r2, r1, r3
 286:	52bc 	movi	r1, -68
 288:	0266 	add	r1, r1, r6
 28a:	4440 	st	0(r1), r2
 28c:	35b2 	ld	r2, -28(r6)
 28e:	0122 	add	r0, r4, r2
 290:	54ba 	movi	r2, -70
 292:	04a6 	add	r2, r2, r6
 294:	4080 	st	0(r2), r0
 296:	58bc 	movi	r4, -68
 298:	0926 	add	r4, r4, r6
 29a:	3100 	ld	r0, 0(r4)
 29c:	58ba 	movi	r4, -70
 29e:	0926 	add	r4, r4, r6
 2a0:	3900 	ld	r4, 0(r4)
 2a2:	0624 	add	r3, r0, r4
 2a4:	22c0 	addi	r1, r3, 0
 2a6:	50ba 	movi	r0, -70
 2a8:	0026 	add	r0, r0, r6
 2aa:	4200 	st	0(r0), r1
 2ac:	37b5 	ld	r3, -22(r6)
 2ae:	54b8 	movi	r2, -72
 2b0:	04a6 	add	r2, r2, r6
 2b2:	3480 	ld	r2, 0(r2)
 2b4:	02e2 	add	r1, r3, r2
 2b6:	37ba 	ld	r3, -12(r6)
 2b8:	e640 	stb	0(r1), r3
        letra[i].color=colores[i];
 2ba:	39bf 	ld	r4, -2(r6)
 2bc:	49bb 	st	-10(r6), r4
 2be:	39bf 	ld	r4, -2(r6)
 2c0:	500d 	movi	r0, 13
 2c2:	5110 	movhi	r0, 16
 2c4:	520f 	movi	r1, 15
 2c6:	0258 	not	r1, r1
 2c8:	2241 	addi	r1, r1, 1
 2ca:	0731 	sha	r3, r4, r1
 2cc:	2300 	addi	r1, r4, 0
 2ce:	24c0 	addi	r2, r3, 0
 2d0:	0221 	add	r1, r0, r1
 2d2:	d240 	ldb	r1, 0(r1)
 2d4:	43bc 	st	-8(r6), r1
 2d6:	5070 	movi	r0, 112
 2d8:	5110 	movhi	r0, 16
 2da:	41b0 	st	-32(r6), r0
 2dc:	520f 	movi	r1, 15
 2de:	0258 	not	r1, r1
 2e0:	2241 	addi	r1, r1, 1
 2e2:	35bb 	ld	r2, -10(r6)
 2e4:	06b1 	sha	r3, r2, r1
 2e6:	39bb 	ld	r4, -10(r6)
 2e8:	2300 	addi	r1, r4, 0
 2ea:	24c0 	addi	r2, r3, 0
 2ec:	560e 	movi	r3, 14
 2ee:	06d8 	not	r3, r3
 2f0:	26c1 	addi	r3, r3, 1
 2f2:	067b 	shl	r3, r1, r3
 2f4:	47af 	st	-34(r6), r3
 2f6:	5002 	movi	r0, 2
 2f8:	5602 	movi	r3, 2
 2fa:	47ae 	st	-36(r6), r3
 2fc:	08b0 	sha	r4, r2, r0
 2fe:	31af 	ld	r0, -34(r6)
 300:	080c 	or	r4, r0, r4
 302:	31ae 	ld	r0, -36(r6)
 304:	0670 	sha	r3, r1, r0
 306:	5202 	movi	r1, 2
 308:	43ac 	st	-40(r6), r1
 30a:	5400 	movi	r2, 0
 30c:	45ad 	st	-38(r6), r2
 30e:	31ac 	ld	r0, -40(r6)
 310:	02e0 	add	r1, r3, r0
 312:	50b8 	movi	r0, -72
 314:	0026 	add	r0, r0, r6
 316:	4200 	st	0(r0), r1
 318:	52b8 	movi	r1, -72
 31a:	0266 	add	r1, r1, r6
 31c:	3240 	ld	r1, 0(r1)
 31e:	1463 	cmpltu	r2, r1, r3
 320:	52bc 	movi	r1, -68
 322:	0266 	add	r1, r1, r6
 324:	4440 	st	0(r1), r2
 326:	35ad 	ld	r2, -38(r6)
 328:	0122 	add	r0, r4, r2
 32a:	54ba 	movi	r2, -70
 32c:	04a6 	add	r2, r2, r6
 32e:	4080 	st	0(r2), r0
 330:	58bc 	movi	r4, -68
 332:	0926 	add	r4, r4, r6
 334:	3100 	ld	r0, 0(r4)
 336:	58ba 	movi	r4, -70
 338:	0926 	add	r4, r4, r6
 33a:	3900 	ld	r4, 0(r4)
 33c:	0624 	add	r3, r0, r4
 33e:	22c0 	addi	r1, r3, 0
 340:	50ba 	movi	r0, -70
 342:	0026 	add	r0, r0, r6
 344:	4200 	st	0(r0), r1
 346:	37b0 	ld	r3, -32(r6)
 348:	54b8 	movi	r2, -72
 34a:	04a6 	add	r2, r2, r6
 34c:	3480 	ld	r2, 0(r2)
 34e:	02e2 	add	r1, r3, r2
 350:	37bc 	ld	r3, -8(r6)
 352:	e641 	stb	1(r1), r3
        mostrar_nueva_posicion(i,letra[i].posicion,letra[i].caracter,letra[i].color);
 354:	35bf 	ld	r2, -2(r6)
 356:	5870 	movi	r4, 112
 358:	5910 	movhi	r4, 16
 35a:	49ab 	st	-42(r6), r4
 35c:	520f 	movi	r1, 15
 35e:	0258 	not	r1, r1
 360:	2241 	addi	r1, r1, 1
 362:	02b1 	sha	r1, r2, r1
 364:	2680 	addi	r3, r2, 0
 366:	2840 	addi	r4, r1, 0
 368:	520e 	movi	r1, 14
 36a:	0258 	not	r1, r1
 36c:	2241 	addi	r1, r1, 1
 36e:	02f9 	shl	r1, r3, r1
 370:	43aa 	st	-44(r6), r1
 372:	5002 	movi	r0, 2
 374:	5202 	movi	r1, 2
 376:	43a9 	st	-46(r6), r1
 378:	0530 	sha	r2, r4, r0
 37a:	31aa 	ld	r0, -44(r6)
 37c:	040a 	or	r2, r0, r2
 37e:	31a9 	ld	r0, -46(r6)
 380:	02f0 	sha	r1, r3, r0
 382:	37ab 	ld	r3, -42(r6)
 384:	02e1 	add	r1, r3, r1
 386:	3240 	ld	r1, 0(r1)
 388:	43bd 	st	-6(r6), r1
 38a:	39bf 	ld	r4, -2(r6)
 38c:	5070 	movi	r0, 112
 38e:	5110 	movhi	r0, 16
 390:	41a8 	st	-48(r6), r0
 392:	520f 	movi	r1, 15
 394:	0258 	not	r1, r1
 396:	2241 	addi	r1, r1, 1
 398:	0731 	sha	r3, r4, r1
 39a:	2300 	addi	r1, r4, 0
 39c:	24c0 	addi	r2, r3, 0
 39e:	560e 	movi	r3, 14
 3a0:	06d8 	not	r3, r3
 3a2:	26c1 	addi	r3, r3, 1
 3a4:	067b 	shl	r3, r1, r3
 3a6:	47a7 	st	-50(r6), r3
 3a8:	5002 	movi	r0, 2
 3aa:	5602 	movi	r3, 2
 3ac:	47a6 	st	-52(r6), r3
 3ae:	08b0 	sha	r4, r2, r0
 3b0:	31a7 	ld	r0, -50(r6)
 3b2:	080c 	or	r4, r0, r4
 3b4:	31a6 	ld	r0, -52(r6)
 3b6:	0670 	sha	r3, r1, r0
 3b8:	5202 	movi	r1, 2
 3ba:	43a4 	st	-56(r6), r1
 3bc:	5400 	movi	r2, 0
 3be:	45a5 	st	-54(r6), r2
 3c0:	31a4 	ld	r0, -56(r6)
 3c2:	02e0 	add	r1, r3, r0
 3c4:	50b8 	movi	r0, -72
 3c6:	0026 	add	r0, r0, r6
 3c8:	4200 	st	0(r0), r1
 3ca:	52b8 	movi	r1, -72
 3cc:	0266 	add	r1, r1, r6
 3ce:	3240 	ld	r1, 0(r1)
 3d0:	1463 	cmpltu	r2, r1, r3
 3d2:	52bc 	movi	r1, -68
 3d4:	0266 	add	r1, r1, r6
 3d6:	4440 	st	0(r1), r2
 3d8:	35a5 	ld	r2, -54(r6)
 3da:	0122 	add	r0, r4, r2
 3dc:	54ba 	movi	r2, -70
 3de:	04a6 	add	r2, r2, r6
 3e0:	4080 	st	0(r2), r0
 3e2:	58bc 	movi	r4, -68
 3e4:	0926 	add	r4, r4, r6
 3e6:	3100 	ld	r0, 0(r4)
 3e8:	58ba 	movi	r4, -70
 3ea:	0926 	add	r4, r4, r6
 3ec:	3900 	ld	r4, 0(r4)
 3ee:	0624 	add	r3, r0, r4
 3f0:	22c0 	addi	r1, r3, 0
 3f2:	50ba 	movi	r0, -70
 3f4:	0026 	add	r0, r0, r6
 3f6:	4200 	st	0(r0), r1
 3f8:	37a8 	ld	r3, -48(r6)
 3fa:	54b8 	movi	r2, -72
 3fc:	04a6 	add	r2, r2, r6
 3fe:	3480 	ld	r2, 0(r2)
 400:	02e2 	add	r1, r3, r2
 402:	d240 	ldb	r1, 0(r1)
 404:	43be 	st	-4(r6), r1
 406:	39bf 	ld	r4, -2(r6)
 408:	5670 	movi	r3, 112
 40a:	5710 	movhi	r3, 16
 40c:	47a3 	st	-58(r6), r3
 40e:	520f 	movi	r1, 15
 410:	0258 	not	r1, r1
 412:	2241 	addi	r1, r1, 1
 414:	0731 	sha	r3, r4, r1
 416:	2300 	addi	r1, r4, 0
 418:	24c0 	addi	r2, r3, 0
 41a:	560e 	movi	r3, 14
 41c:	06d8 	not	r3, r3
 41e:	26c1 	addi	r3, r3, 1
 420:	067b 	shl	r3, r1, r3
 422:	47a2 	st	-60(r6), r3
 424:	5002 	movi	r0, 2
 426:	5802 	movi	r4, 2
 428:	49a1 	st	-62(r6), r4
 42a:	08b0 	sha	r4, r2, r0
 42c:	31a2 	ld	r0, -60(r6)
 42e:	080c 	or	r4, r0, r4
 430:	31a1 	ld	r0, -62(r6)
 432:	0670 	sha	r3, r1, r0
 434:	5402 	movi	r2, 2
 436:	52be 	movi	r1, -66
 438:	0266 	add	r1, r1, r6
 43a:	4440 	st	0(r1), r2
 43c:	5000 	movi	r0, 0
 43e:	41a0 	st	-64(r6), r0
 440:	52be 	movi	r1, -66
 442:	0266 	add	r1, r1, r6
 444:	3240 	ld	r1, 0(r1)
 446:	04e1 	add	r2, r3, r1
 448:	52b8 	movi	r1, -72
 44a:	0266 	add	r1, r1, r6
 44c:	4440 	st	0(r1), r2
 44e:	54b8 	movi	r2, -72
 450:	04a6 	add	r2, r2, r6
 452:	3480 	ld	r2, 0(r2)
 454:	10a3 	cmpltu	r0, r2, r3
 456:	54bc 	movi	r2, -68
 458:	04a6 	add	r2, r2, r6
 45a:	4080 	st	0(r2), r0
 45c:	31a0 	ld	r0, -64(r6)
 45e:	0320 	add	r1, r4, r0
 460:	50ba 	movi	r0, -70
 462:	0026 	add	r0, r0, r6
 464:	4200 	st	0(r0), r1
 466:	52bc 	movi	r1, -68
 468:	0266 	add	r1, r1, r6
 46a:	3440 	ld	r2, 0(r1)
 46c:	52ba 	movi	r1, -70
 46e:	0266 	add	r1, r1, r6
 470:	3240 	ld	r1, 0(r1)
 472:	06a1 	add	r3, r2, r1
 474:	28c0 	addi	r4, r3, 0
 476:	54ba 	movi	r2, -70
 478:	04a6 	add	r2, r2, r6
 47a:	4880 	st	0(r2), r4
 47c:	35a3 	ld	r2, -58(r6)
 47e:	50b8 	movi	r0, -72
 480:	0026 	add	r0, r0, r6
 482:	3000 	ld	r0, 0(r0)
 484:	02a0 	add	r1, r2, r0
 486:	d641 	ldb	r3, 1(r1)
 488:	2ffa 	addi	r7, r7, -6
 48a:	23c0 	addi	r1, r7, 0
 48c:	35bf 	ld	r2, -2(r6)
 48e:	4440 	st	0(r1), r2
 490:	35bd 	ld	r2, -6(r6)
 492:	4441 	st	2(r1), r2
 494:	39be 	ld	r4, -4(r6)
 496:	e844 	stb	4(r1), r4
 498:	e645 	stb	5(r1), r3
 49a:	5274 	movi	r1, 116
 49c:	5300 	movhi	r1, 0
 49e:	aa44 	jal	r5, r1
 4a0:	2fc6 	addi	r7, r7, 6
 4a2:	33bf 	ld	r1, -2(r6)
 4a4:	2241 	addi	r1, r1, 1
 4a6:	43bf 	st	-2(r6), r1
 4a8:	33bf 	ld	r1, -2(r6)
 4aa:	540b 	movi	r2, 11
 4ac:	124a 	cmple	r1, r1, r2
 4ae:	5aea 	movi	r5, -22
 4b0:	5b01 	movhi	r5, 1
 4b2:	a341 	jnz	r1, r5
    }
}
 4b4:	31c3 	ld	r0, 6(r7)
 4b6:	35c2 	ld	r2, 4(r7)
 4b8:	37c1 	ld	r3, 2(r7)
 4ba:	39c0 	ld	r4, 0(r7)
 4bc:	2f80 	addi	r7, r6, 0
 4be:	3dc0 	ld	r6, 0(r7)
 4c0:	3bc1 	ld	r5, 2(r7)
 4c2:	2fc4 	addi	r7, r7, 4
 4c4:	a143 	jmp	r5

000004c6 <main>:


int main (void) {
 4c6:	2fe0 	addi	r7, r7, -32
 4c8:	4bcf 	st	30(r7), r5
 4ca:	4dce 	st	28(r7), r6
 4cc:	2ddc 	addi	r6, r7, 28
 4ce:	5ac2 	movi	r5, -62
 4d0:	0fe5 	add	r7, r7, r5
 4d2:	41c3 	st	6(r7), r0
 4d4:	45c2 	st	4(r7), r2
 4d6:	47c1 	st	2(r7), r3
 4d8:	49c0 	st	0(r7), r4

    unsigned int tics_anterior=0;
 4da:	5200 	movi	r1, 0
 4dc:	43bd 	st	-6(r6), r1
    int pause=0;
 4de:	5200 	movi	r1, 0
 4e0:	43be 	st	-4(r6), r1
    
    if (NUMERO_LETRAS<=LIMITE_LETRAS) {
        
        reset_corre_letras();
 4e2:	5292 	movi	r1, -110
 4e4:	5301 	movhi	r1, 1
 4e6:	aa44 	jal	r5, r1

        while (1) {
            switch (tecla_pulsada)
 4e8:	5262 	movi	r1, 98
 4ea:	5310 	movhi	r1, 16
 4ec:	3240 	ld	r1, 0(r1)
 4ee:	43b7 	st	-18(r6), r1
 4f0:	5252 	movi	r1, 82
 4f2:	31b7 	ld	r0, -18(r6)
 4f4:	1219 	cmpeq	r1, r0, r1
 4f6:	6315 	bnz	r1, 44
 4f8:	5252 	movi	r1, 82
 4fa:	35b7 	ld	r2, -18(r6)
 4fc:	12a9 	cmpleu	r1, r2, r1
 4fe:	6207 	bz	r1, 16
 500:	5250 	movi	r1, 80
 502:	37b7 	ld	r3, -18(r6)
 504:	12d9 	cmpeq	r1, r3, r1
 506:	6316 	bnz	r1, 46
 508:	5a4c 	movi	r5, 76
 50a:	5b05 	movhi	r5, 5
 50c:	a143 	jmp	r5
 50e:	5270 	movi	r1, 112
 510:	39b7 	ld	r4, -18(r6)
 512:	1319 	cmpeq	r1, r4, r1
 514:	630f 	bnz	r1, 32
 516:	5272 	movi	r1, 114
 518:	31b7 	ld	r0, -18(r6)
 51a:	1219 	cmpeq	r1, r0, r1
 51c:	6302 	bnz	r1, 6
 51e:	5a00 	movi	r5, 0
 520:	6a15 	bz	r5, 44
            {
            case 'r':    case 'R':
                reset_corre_letras();
 522:	5292 	movi	r1, -110
 524:	5301 	movhi	r1, 1
 526:	aa44 	jal	r5, r1
                tecla_pulsada=0;
 528:	5462 	movi	r2, 98
 52a:	5510 	movhi	r2, 16
 52c:	5200 	movi	r1, 0
 52e:	4280 	st	0(r2), r1
                break;
 530:	5a00 	movi	r5, 0
 532:	6a0c 	bz	r5, 26

            case 'p':    case 'P':
                if (pause==0) pause=1; else pause=0;
 534:	33be 	ld	r1, -4(r6)
 536:	6304 	bnz	r1, 10
 538:	5201 	movi	r1, 1
 53a:	43be 	st	-4(r6), r1
 53c:	5a00 	movi	r5, 0
 53e:	6a02 	bz	r5, 6
 540:	5200 	movi	r1, 0
 542:	43be 	st	-4(r6), r1
                tecla_pulsada=0;
 544:	5462 	movi	r2, 98
 546:	5510 	movhi	r2, 16
 548:	5200 	movi	r1, 0
 54a:	4280 	st	0(r2), r1
                break;

            default:
                break;
            }

            if (pause==0) {
 54c:	33be 	ld	r1, -4(r6)
 54e:	5ae8 	movi	r5, -24
 550:	5b04 	movhi	r5, 4
 552:	a341 	jnz	r1, r5
                // para DEBUG: mostramos los valores del timer por los leds verdes
                __asm__ ( "out %0, %1" 
 554:	5260 	movi	r1, 96
 556:	5310 	movhi	r1, 16
 558:	3240 	ld	r1, 0(r1)
 55a:	7305 	out	5, r1
                        : /* sin salidas*/
                        : "i" (5), "r" (tics_timer));
                // fin DEBUG

                if (tics_timer!=tics_anterior) {
 55c:	5260 	movi	r1, 96
 55e:	5310 	movhi	r1, 16
 560:	3440 	ld	r2, 0(r1)
 562:	33bd 	ld	r1, -6(r6)
 564:	1299 	cmpeq	r1, r2, r1
 566:	5ae8 	movi	r5, -24
 568:	5b04 	movhi	r5, 4
 56a:	a341 	jnz	r1, r5
                    tics_anterior=tics_timer;
 56c:	5260 	movi	r1, 96
 56e:	5310 	movhi	r1, 16
 570:	3240 	ld	r1, 0(r1)
 572:	43bd 	st	-6(r6), r1

                    int fila;
                    for (fila=0; fila<NUMERO_LETRAS; fila++) {
 574:	5200 	movi	r1, 0
 576:	43bf 	st	-2(r6), r1
 578:	5a6c 	movi	r5, 108
 57a:	5b08 	movhi	r5, 8
 57c:	a143 	jmp	r5
                        if (tics_timer%divisores[fila]==0) {
 57e:	5260 	movi	r1, 96
 580:	5310 	movhi	r1, 16
 582:	3240 	ld	r1, 0(r1)
 584:	43b8 	st	-16(r6), r1
 586:	39bf 	ld	r4, -2(r6)
 588:	521a 	movi	r1, 26
 58a:	5310 	movhi	r1, 16
 58c:	43b6 	st	-20(r6), r1
 58e:	520f 	movi	r1, 15
 590:	0258 	not	r1, r1
 592:	2241 	addi	r1, r1, 1
 594:	0731 	sha	r3, r4, r1
 596:	2300 	addi	r1, r4, 0
 598:	24c0 	addi	r2, r3, 0
 59a:	0661 	add	r3, r1, r1
 59c:	10e1 	cmpltu	r0, r3, r1
 59e:	08a2 	add	r4, r2, r2
 5a0:	0224 	add	r1, r0, r4
 5a2:	2840 	addi	r4, r1, 0
 5a4:	35b6 	ld	r2, -20(r6)
 5a6:	02a3 	add	r1, r2, r3
 5a8:	3240 	ld	r1, 0(r1)
 5aa:	2440 	addi	r2, r1, 0
 5ac:	37b8 	ld	r3, -16(r6)
 5ae:	82ea 	divu	r1, r3, r2
 5b0:	8242 	mul	r1, r1, r2
 5b2:	35b8 	ld	r2, -16(r6)
 5b4:	02a9 	sub	r1, r2, r1
 5b6:	5a66 	movi	r5, 102
 5b8:	5b08 	movhi	r5, 8
 5ba:	a341 	jnz	r1, r5
                            borrar_letra(fila,letra[fila].posicion);
 5bc:	35bf 	ld	r2, -2(r6)
 5be:	5870 	movi	r4, 112
 5c0:	5910 	movhi	r4, 16
 5c2:	49b5 	st	-22(r6), r4
 5c4:	520f 	movi	r1, 15
 5c6:	0258 	not	r1, r1
 5c8:	2241 	addi	r1, r1, 1
 5ca:	02b1 	sha	r1, r2, r1
 5cc:	2680 	addi	r3, r2, 0
 5ce:	2840 	addi	r4, r1, 0
 5d0:	520e 	movi	r1, 14
 5d2:	0258 	not	r1, r1
 5d4:	2241 	addi	r1, r1, 1
 5d6:	02f9 	shl	r1, r3, r1
 5d8:	43b4 	st	-24(r6), r1
 5da:	5002 	movi	r0, 2
 5dc:	5202 	movi	r1, 2
 5de:	43b3 	st	-26(r6), r1
 5e0:	0530 	sha	r2, r4, r0
 5e2:	31b4 	ld	r0, -24(r6)
 5e4:	040a 	or	r2, r0, r2
 5e6:	31b3 	ld	r0, -26(r6)
 5e8:	02f0 	sha	r1, r3, r0
 5ea:	37b5 	ld	r3, -22(r6)
 5ec:	02e1 	add	r1, r3, r1
 5ee:	3640 	ld	r3, 0(r1)
 5f0:	2ffc 	addi	r7, r7, -4
 5f2:	25c0 	addi	r2, r7, 0
 5f4:	33bf 	ld	r1, -2(r6)
 5f6:	4280 	st	0(r2), r1
 5f8:	4681 	st	2(r2), r3
 5fa:	5232 	movi	r1, 50
 5fc:	5300 	movhi	r1, 0
 5fe:	aa44 	jal	r5, r1
 600:	2fc4 	addi	r7, r7, 4
                            if (letra[fila].posicion<80)
 602:	35bf 	ld	r2, -2(r6)
 604:	5870 	movi	r4, 112
 606:	5910 	movhi	r4, 16
 608:	49b2 	st	-28(r6), r4
 60a:	520f 	movi	r1, 15
 60c:	0258 	not	r1, r1
 60e:	2241 	addi	r1, r1, 1
 610:	02b1 	sha	r1, r2, r1
 612:	2680 	addi	r3, r2, 0
 614:	2840 	addi	r4, r1, 0
 616:	520e 	movi	r1, 14
 618:	0258 	not	r1, r1
 61a:	2241 	addi	r1, r1, 1
 61c:	02f9 	shl	r1, r3, r1
 61e:	43b1 	st	-30(r6), r1
 620:	5002 	movi	r0, 2
 622:	5202 	movi	r1, 2
 624:	43b0 	st	-32(r6), r1
 626:	0530 	sha	r2, r4, r0
 628:	31b1 	ld	r0, -30(r6)
 62a:	040a 	or	r2, r0, r2
 62c:	31b0 	ld	r0, -32(r6)
 62e:	02f0 	sha	r1, r3, r0
 630:	37b2 	ld	r3, -28(r6)
 632:	02e1 	add	r1, r3, r1
 634:	3440 	ld	r2, 0(r1)
 636:	524f 	movi	r1, 79
 638:	1289 	cmple	r1, r2, r1
 63a:	5aba 	movi	r5, -70
 63c:	5b06 	movhi	r5, 6
 63e:	a340 	jz	r1, r5
                                letra[fila].posicion++;
 640:	39bf 	ld	r4, -2(r6)
 642:	49b9 	st	-14(r6), r4
 644:	5070 	movi	r0, 112
 646:	5110 	movhi	r0, 16
 648:	41af 	st	-34(r6), r0
 64a:	520f 	movi	r1, 15
 64c:	0258 	not	r1, r1
 64e:	2241 	addi	r1, r1, 1
 650:	35b9 	ld	r2, -14(r6)
 652:	02b1 	sha	r1, r2, r1
 654:	31b9 	ld	r0, -14(r6)
 656:	2600 	addi	r3, r0, 0
 658:	2840 	addi	r4, r1, 0
 65a:	520e 	movi	r1, 14
 65c:	0258 	not	r1, r1
 65e:	2241 	addi	r1, r1, 1
 660:	02f9 	shl	r1, r3, r1
 662:	43ae 	st	-36(r6), r1
 664:	5002 	movi	r0, 2
 666:	5202 	movi	r1, 2
 668:	43ad 	st	-38(r6), r1
 66a:	0530 	sha	r2, r4, r0
 66c:	31ae 	ld	r0, -36(r6)
 66e:	040a 	or	r2, r0, r2
 670:	31ad 	ld	r0, -38(r6)
 672:	02f0 	sha	r1, r3, r0
 674:	37af 	ld	r3, -34(r6)
 676:	02e1 	add	r1, r3, r1
 678:	3240 	ld	r1, 0(r1)
 67a:	2241 	addi	r1, r1, 1
 67c:	43ba 	st	-12(r6), r1
 67e:	5870 	movi	r4, 112
 680:	5910 	movhi	r4, 16
 682:	49ac 	st	-40(r6), r4
 684:	520f 	movi	r1, 15
 686:	0258 	not	r1, r1
 688:	2241 	addi	r1, r1, 1
 68a:	31b9 	ld	r0, -14(r6)
 68c:	0231 	sha	r1, r0, r1
 68e:	35b9 	ld	r2, -14(r6)
 690:	2680 	addi	r3, r2, 0
 692:	2840 	addi	r4, r1, 0
 694:	520e 	movi	r1, 14
 696:	0258 	not	r1, r1
 698:	2241 	addi	r1, r1, 1
 69a:	02f9 	shl	r1, r3, r1
 69c:	43ab 	st	-42(r6), r1
 69e:	5002 	movi	r0, 2
 6a0:	5202 	movi	r1, 2
 6a2:	43aa 	st	-44(r6), r1
 6a4:	0530 	sha	r2, r4, r0
 6a6:	31ab 	ld	r0, -42(r6)
 6a8:	040a 	or	r2, r0, r2
 6aa:	31aa 	ld	r0, -44(r6)
 6ac:	02f0 	sha	r1, r3, r0
 6ae:	37ac 	ld	r3, -40(r6)
 6b0:	02e1 	add	r1, r3, r1
 6b2:	39ba 	ld	r4, -12(r6)
 6b4:	4840 	st	0(r1), r4
 6b6:	5a00 	movi	r5, 0
 6b8:	6a1b 	bz	r5, 56
                            else
                                letra[fila].posicion=0;
 6ba:	35bf 	ld	r2, -2(r6)
 6bc:	5070 	movi	r0, 112
 6be:	5110 	movhi	r0, 16
 6c0:	41a9 	st	-46(r6), r0
 6c2:	520f 	movi	r1, 15
 6c4:	0258 	not	r1, r1
 6c6:	2241 	addi	r1, r1, 1
 6c8:	02b1 	sha	r1, r2, r1
 6ca:	2680 	addi	r3, r2, 0
 6cc:	2840 	addi	r4, r1, 0
 6ce:	520e 	movi	r1, 14
 6d0:	0258 	not	r1, r1
 6d2:	2241 	addi	r1, r1, 1
 6d4:	02f9 	shl	r1, r3, r1
 6d6:	43a8 	st	-48(r6), r1
 6d8:	5002 	movi	r0, 2
 6da:	5202 	movi	r1, 2
 6dc:	43a7 	st	-50(r6), r1
 6de:	0530 	sha	r2, r4, r0
 6e0:	31a8 	ld	r0, -48(r6)
 6e2:	040a 	or	r2, r0, r2
 6e4:	31a7 	ld	r0, -50(r6)
 6e6:	02f0 	sha	r1, r3, r0
 6e8:	37a9 	ld	r3, -46(r6)
 6ea:	04e1 	add	r2, r3, r1
 6ec:	5200 	movi	r1, 0
 6ee:	4280 	st	0(r2), r1

                            mostrar_nueva_posicion(fila,letra[fila].posicion,letra[fila].caracter,letra[fila].color);
 6f0:	35bf 	ld	r2, -2(r6)
 6f2:	5870 	movi	r4, 112
 6f4:	5910 	movhi	r4, 16
 6f6:	49a6 	st	-52(r6), r4
 6f8:	520f 	movi	r1, 15
 6fa:	0258 	not	r1, r1
 6fc:	2241 	addi	r1, r1, 1
 6fe:	02b1 	sha	r1, r2, r1
 700:	2680 	addi	r3, r2, 0
 702:	2840 	addi	r4, r1, 0
 704:	520e 	movi	r1, 14
 706:	0258 	not	r1, r1
 708:	2241 	addi	r1, r1, 1
 70a:	02f9 	shl	r1, r3, r1
 70c:	43a5 	st	-54(r6), r1
 70e:	5002 	movi	r0, 2
 710:	5202 	movi	r1, 2
 712:	43a4 	st	-56(r6), r1
 714:	0530 	sha	r2, r4, r0
 716:	31a5 	ld	r0, -54(r6)
 718:	040a 	or	r2, r0, r2
 71a:	31a4 	ld	r0, -56(r6)
 71c:	02f0 	sha	r1, r3, r0
 71e:	37a6 	ld	r3, -52(r6)
 720:	02e1 	add	r1, r3, r1
 722:	3240 	ld	r1, 0(r1)
 724:	43bb 	st	-10(r6), r1
 726:	39bf 	ld	r4, -2(r6)
 728:	5070 	movi	r0, 112
 72a:	5110 	movhi	r0, 16
 72c:	41a3 	st	-58(r6), r0
 72e:	520f 	movi	r1, 15
 730:	0258 	not	r1, r1
 732:	2241 	addi	r1, r1, 1
 734:	0731 	sha	r3, r4, r1
 736:	2300 	addi	r1, r4, 0
 738:	24c0 	addi	r2, r3, 0
 73a:	560e 	movi	r3, 14
 73c:	06d8 	not	r3, r3
 73e:	26c1 	addi	r3, r3, 1
 740:	067b 	shl	r3, r1, r3
 742:	47a2 	st	-60(r6), r3
 744:	5002 	movi	r0, 2
 746:	5602 	movi	r3, 2
 748:	47a1 	st	-62(r6), r3
 74a:	08b0 	sha	r4, r2, r0
 74c:	31a2 	ld	r0, -60(r6)
 74e:	080c 	or	r4, r0, r4
 750:	31a1 	ld	r0, -62(r6)
 752:	0670 	sha	r3, r1, r0
 754:	5402 	movi	r2, 2
 756:	52be 	movi	r1, -66
 758:	0266 	add	r1, r1, r6
 75a:	4440 	st	0(r1), r2
 75c:	5000 	movi	r0, 0
 75e:	41a0 	st	-64(r6), r0
 760:	52be 	movi	r1, -66
 762:	0266 	add	r1, r1, r6
 764:	3240 	ld	r1, 0(r1)
 766:	04e1 	add	r2, r3, r1
 768:	52ae 	movi	r1, -82
 76a:	0266 	add	r1, r1, r6
 76c:	4440 	st	0(r1), r2
 76e:	54ae 	movi	r2, -82
 770:	04a6 	add	r2, r2, r6
 772:	3480 	ld	r2, 0(r2)
 774:	10a3 	cmpltu	r0, r2, r3
 776:	54b2 	movi	r2, -78
 778:	04a6 	add	r2, r2, r6
 77a:	4080 	st	0(r2), r0
 77c:	31a0 	ld	r0, -64(r6)
 77e:	0320 	add	r1, r4, r0
 780:	50b0 	movi	r0, -80
 782:	0026 	add	r0, r0, r6
 784:	4200 	st	0(r0), r1
 786:	52b2 	movi	r1, -78
 788:	0266 	add	r1, r1, r6
 78a:	3440 	ld	r2, 0(r1)
 78c:	52b0 	movi	r1, -80
 78e:	0266 	add	r1, r1, r6
 790:	3240 	ld	r1, 0(r1)
 792:	06a1 	add	r3, r2, r1
 794:	28c0 	addi	r4, r3, 0
 796:	54b0 	movi	r2, -80
 798:	04a6 	add	r2, r2, r6
 79a:	4880 	st	0(r2), r4
 79c:	35a3 	ld	r2, -58(r6)
 79e:	50ae 	movi	r0, -82
 7a0:	0026 	add	r0, r0, r6
 7a2:	3000 	ld	r0, 0(r0)
 7a4:	02a0 	add	r1, r2, r0
 7a6:	d240 	ldb	r1, 0(r1)
 7a8:	43bc 	st	-8(r6), r1
 7aa:	39bf 	ld	r4, -2(r6)
 7ac:	5470 	movi	r2, 112
 7ae:	5510 	movhi	r2, 16
 7b0:	52bc 	movi	r1, -68
 7b2:	0266 	add	r1, r1, r6
 7b4:	4440 	st	0(r1), r2
 7b6:	520f 	movi	r1, 15
 7b8:	0258 	not	r1, r1
 7ba:	2241 	addi	r1, r1, 1
 7bc:	0731 	sha	r3, r4, r1
 7be:	2300 	addi	r1, r4, 0
 7c0:	24c0 	addi	r2, r3, 0
 7c2:	560e 	movi	r3, 14
 7c4:	06d8 	not	r3, r3
 7c6:	26c1 	addi	r3, r3, 1
 7c8:	007b 	shl	r0, r1, r3
 7ca:	58ba 	movi	r4, -70
 7cc:	0926 	add	r4, r4, r6
 7ce:	4100 	st	0(r4), r0
 7d0:	5002 	movi	r0, 2
 7d2:	5802 	movi	r4, 2
 7d4:	56b8 	movi	r3, -72
 7d6:	06e6 	add	r3, r3, r6
 7d8:	48c0 	st	0(r3), r4
 7da:	08b0 	sha	r4, r2, r0
 7dc:	50ba 	movi	r0, -70
 7de:	0026 	add	r0, r0, r6
 7e0:	3000 	ld	r0, 0(r0)
 7e2:	080c 	or	r4, r0, r4
 7e4:	50b8 	movi	r0, -72
 7e6:	0026 	add	r0, r0, r6
 7e8:	3000 	ld	r0, 0(r0)
 7ea:	0670 	sha	r3, r1, r0
 7ec:	5402 	movi	r2, 2
 7ee:	52b4 	movi	r1, -76
 7f0:	0266 	add	r1, r1, r6
 7f2:	4440 	st	0(r1), r2
 7f4:	5200 	movi	r1, 0
 7f6:	50b6 	movi	r0, -74
 7f8:	0026 	add	r0, r0, r6
 7fa:	4200 	st	0(r0), r1
 7fc:	54b4 	movi	r2, -76
 7fe:	04a6 	add	r2, r2, r6
 800:	3480 	ld	r2, 0(r2)
 802:	00e2 	add	r0, r3, r2
 804:	54ae 	movi	r2, -82
 806:	04a6 	add	r2, r2, r6
 808:	4080 	st	0(r2), r0
 80a:	50ae 	movi	r0, -82
 80c:	0026 	add	r0, r0, r6
 80e:	3000 	ld	r0, 0(r0)
 810:	1223 	cmpltu	r1, r0, r3
 812:	50b2 	movi	r0, -78
 814:	0026 	add	r0, r0, r6
 816:	4200 	st	0(r0), r1
 818:	52b6 	movi	r1, -74
 81a:	0266 	add	r1, r1, r6
 81c:	3240 	ld	r1, 0(r1)
 81e:	0521 	add	r2, r4, r1
 820:	52b0 	movi	r1, -80
 822:	0266 	add	r1, r1, r6
 824:	4440 	st	0(r1), r2
 826:	54b2 	movi	r2, -78
 828:	04a6 	add	r2, r2, r6
 82a:	3880 	ld	r4, 0(r2)
 82c:	54b0 	movi	r2, -80
 82e:	04a6 	add	r2, r2, r6
 830:	3480 	ld	r2, 0(r2)
 832:	0722 	add	r3, r4, r2
 834:	20c0 	addi	r0, r3, 0
 836:	58b0 	movi	r4, -80
 838:	0926 	add	r4, r4, r6
 83a:	4100 	st	0(r4), r0
 83c:	54bc 	movi	r2, -68
 83e:	04a6 	add	r2, r2, r6
 840:	3680 	ld	r3, 0(r2)
 842:	54ae 	movi	r2, -82
 844:	04a6 	add	r2, r2, r6
 846:	3480 	ld	r2, 0(r2)
 848:	02e2 	add	r1, r3, r2
 84a:	d641 	ldb	r3, 1(r1)
 84c:	2ffa 	addi	r7, r7, -6
 84e:	23c0 	addi	r1, r7, 0
 850:	35bf 	ld	r2, -2(r6)
 852:	4440 	st	0(r1), r2
 854:	39bb 	ld	r4, -10(r6)
 856:	4841 	st	2(r1), r4
 858:	31bc 	ld	r0, -8(r6)
 85a:	e044 	stb	4(r1), r0
 85c:	e645 	stb	5(r1), r3
 85e:	5274 	movi	r1, 116
 860:	5300 	movhi	r1, 0
 862:	aa44 	jal	r5, r1
 864:	2fc6 	addi	r7, r7, 6
 866:	33bf 	ld	r1, -2(r6)
 868:	2241 	addi	r1, r1, 1
 86a:	43bf 	st	-2(r6), r1
 86c:	33bf 	ld	r1, -2(r6)
 86e:	540b 	movi	r2, 11
 870:	124a 	cmple	r1, r1, r2
 872:	5a7e 	movi	r5, 126
 874:	5b05 	movhi	r5, 5
 876:	a341 	jnz	r1, r5
                        }
                    }
                }
            }
        }
 878:	5ae8 	movi	r5, -24
 87a:	5b04 	movhi	r5, 4
 87c:	a143 	jmp	r5

temp_corre_letras.o:     file format elf32-sisa
temp_corre_letras.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000074 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x0000087e memsz 0x0000087e flags r-x
    LOAD off    0x00000900 vaddr 0x00001000 paddr 0x00001000 align 2**0
         filesz 0x00000060 memsz 0x000000a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .code         0000087e  00000000  00000000  00000074  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00001000  00001000  00000900  2**1  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00001060  00001060  00000960  2**4  ALLOC
  3 .stab         000007bc  000010a0  000010a0  00000960  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005b6  0000185c  0000185c  0000111c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00001000 l    d  .data	00000000 .data
00001034 g     O .data	0000002b mensaje
00001000 g     O .data	0000000d letras
0000100d g     O .data	0000000d colores
0000101a g     O .data	0000001a divisores


Disassembly of section .data:

00001000 <letras>:
                        }
                    }
                }
            }
        }
    1000:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d              ABCDEFGHIJKLM

0000100d <colores>:
    100d:	3f 03 0c 30 15 3c 0f 2a 2a 3f 1a 21 2b              ?..0.<.**?.!+

0000101a <divisores>:
    101a:	01 00 02 00 03 00 04 00 05 00 06 00 07 00 08 00     ................
    102a:	09 00 0a 00 0b 00 0c 00 0d 00                       ..........

00001034 <mensaje>:
    1034:	70 75 6c 73 61 20 27 52 27 20 70 61 72 61 20 72     pulsa 'R' para r
    1044:	65 69 6e 69 63 69 61 72 20 6f 20 27 50 27 20 70     einiciar o 'P' p
    1054:	61 72 61 20 70 61 75 73 61 2e 00 00                 ara pausa...
